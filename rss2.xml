<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Victor</title>
    <link>https://ckck803.github.io/</link>
    
    <atom:link href="https://ckck803.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발 노트</description>
    <pubDate>Sun, 07 Sep 2025 02:02:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[JAVA] - Cold Start</title>
      <link>https://ckck803.github.io/2025/08/31/computer-science/java/cold-start/</link>
      <guid>https://ckck803.github.io/2025/08/31/computer-science/java/cold-start/</guid>
      <pubDate>Sun, 31 Aug 2025 12:16:32 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/java/java.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2022/05/05/computer-science/java/gc-tunning/&quot; title=&quot;[JAVA] - 가비지 컬렉션 튜닝&quot;&gt;[JAVA] - 가비지 컬렉션 튜닝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/02/computer-science/java/garbage-collection/&quot; title=&quot;[JAVA] - Garbage Collection(가비지 컬렉션)&quot;&gt;[JAVA] - Garbage Collection(가비지 컬렉션)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/02/computer-science/java/jvm/&quot; title=&quot;[JAVA] - JVM (자바 가상 머신)&quot;&gt;[JAVA] - JVM (자바 가상 머신)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🧊-Cold-Start란&quot;&gt;&lt;a href=&quot;#🧊-Cold-Start란&quot; class=&quot;headerlink&quot; title=&quot;🧊 Cold Start란?&quot;&gt;&lt;/a&gt;🧊 Cold Start란?&lt;/h2&gt;&lt;p&gt;Cold Start는 JVM이 애플리케이션이 &lt;strong&gt;처음 실행될 때 초기화 과정 때문에 발생하는 지연(latency)&lt;/strong&gt; 을 의미합니다. 마치 추운 겨울날 자동차 시동을 걸 때 엔진이 따뜻해질 때까지 시간이 걸리는 것과 비슷합니다.&lt;/p&gt;
&lt;p&gt;일반적인 서버 환경에서는 애플리케이션이 한 번 시작되면 계속 실행되기 때문에 이 문제가 크게 부각되지 않았습니다. 하지만 MSA 는 인스턴스가 빈번히 생성 및 소멸되고 여러 서버가 긴밀히 통신하는 환경입니다. 이로 인해 특정 시스템이 재부팅되면 연결된 다른 시스템의 응답 속도까지 지연되는 문제가 발생했으며, 무중단 배포·잦은 배포·오토스케일링 등으로 인해 기존 아키텍처보다 성능 지연 현상이 더 빈번하게 나타나게 되었고, 전체적인 서비스 성능 이슈의 문제가 됐습니다.&lt;/p&gt;
&lt;h2 id=&quot;🚦-Cold-Start가-발생하는-이유&quot;&gt;&lt;a href=&quot;#🚦-Cold-Start가-발생하는-이유&quot; class=&quot;headerlink&quot; title=&quot;🚦 Cold Start가 발생하는 이유&quot;&gt;&lt;/a&gt;🚦 Cold Start가 발생하는 이유&lt;/h2&gt;&lt;p&gt;Java 애플리케이션은 네이티브 코드가 아닌 JVM 위에서 바이트코드 실행 방식으로 동작하기 때문에, 첫 실행 시 다음과 같은 과정에서 오버헤드가 발생합니다.&lt;/p&gt;
&lt;h4 id=&quot;1-JVM-초기화-과정의-복잡성&quot;&gt;&lt;a href=&quot;#1-JVM-초기화-과정의-복잡성&quot; class=&quot;headerlink&quot; title=&quot;1. JVM 초기화 과정의 복잡성&quot;&gt;&lt;/a&gt;1. JVM 초기화 과정의 복잡성&lt;/h4&gt;&lt;p&gt;Java 애플리케이션이 시작될 때 여러 단계의 초기화 과정을 거쳐야 합니다:&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/java/java.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2022/05/05/computer-science/java/gc-tunning/" title="[JAVA] - 가비지 컬렉션 튜닝">[JAVA] - 가비지 컬렉션 튜닝</a></li><li><a href="/2021/12/02/computer-science/java/garbage-collection/" title="[JAVA] - Garbage Collection(가비지 컬렉션)">[JAVA] - Garbage Collection(가비지 컬렉션)</a></li><li><a href="/2021/12/02/computer-science/java/jvm/" title="[JAVA] - JVM (자바 가상 머신)">[JAVA] - JVM (자바 가상 머신)</a></li></ul><h2 id="🧊-Cold-Start란"><a href="#🧊-Cold-Start란" class="headerlink" title="🧊 Cold Start란?"></a>🧊 Cold Start란?</h2><p>Cold Start는 JVM이 애플리케이션이 <strong>처음 실행될 때 초기화 과정 때문에 발생하는 지연(latency)</strong> 을 의미합니다. 마치 추운 겨울날 자동차 시동을 걸 때 엔진이 따뜻해질 때까지 시간이 걸리는 것과 비슷합니다.</p><p>일반적인 서버 환경에서는 애플리케이션이 한 번 시작되면 계속 실행되기 때문에 이 문제가 크게 부각되지 않았습니다. 하지만 MSA 는 인스턴스가 빈번히 생성 및 소멸되고 여러 서버가 긴밀히 통신하는 환경입니다. 이로 인해 특정 시스템이 재부팅되면 연결된 다른 시스템의 응답 속도까지 지연되는 문제가 발생했으며, 무중단 배포·잦은 배포·오토스케일링 등으로 인해 기존 아키텍처보다 성능 지연 현상이 더 빈번하게 나타나게 되었고, 전체적인 서비스 성능 이슈의 문제가 됐습니다.</p><h2 id="🚦-Cold-Start가-발생하는-이유"><a href="#🚦-Cold-Start가-발생하는-이유" class="headerlink" title="🚦 Cold Start가 발생하는 이유"></a>🚦 Cold Start가 발생하는 이유</h2><p>Java 애플리케이션은 네이티브 코드가 아닌 JVM 위에서 바이트코드 실행 방식으로 동작하기 때문에, 첫 실행 시 다음과 같은 과정에서 오버헤드가 발생합니다.</p><h4 id="1-JVM-초기화-과정의-복잡성"><a href="#1-JVM-초기화-과정의-복잡성" class="headerlink" title="1. JVM 초기화 과정의 복잡성"></a>1. JVM 초기화 과정의 복잡성</h4><p>Java 애플리케이션이 시작될 때 여러 단계의 초기화 과정을 거쳐야 합니다:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JVM 로딩 → 클래스패스 스캔 → 클래스 로딩 → 바이트코드 검증 → 애플리케이션 초기화</span><br></pre></td></tr></table></figure><p>각 단계마다 상당한 시간이 소요되며, 특히 클래스패스에 많은 JAR 파일이 있을 경우 스캔 시간이 크게 늘어날 수 있습니다.</p><h4 id="2-프레임워크의-무거운-초기화"><a href="#2-프레임워크의-무거운-초기화" class="headerlink" title="2. 프레임워크의 무거운 초기화"></a>2. 프레임워크의 무거운 초기화</h4><p>Spring Boot와 같은 프레임워크를 사용하는 경우 추가적인 오버헤드가 발생합니다:</p><ul><li><strong>의존성 주입</strong>: 모든 빈(Bean)을 생성하고 의존관계를 설정</li><li><strong>자동 설정</strong>: 클래스패스를 기반으로 자동 구성 실행</li><li><strong>컴포넌트 스캔</strong>: <code>@Component</code>, <code>@Service</code> 등의 어노테이션이 붙은 클래스 검색</li></ul><h4 id="3-JIT-컴파일러의-워밍업-시간"><a href="#3-JIT-컴파일러의-워밍업-시간" class="headerlink" title="3. JIT 컴파일러의 워밍업 시간"></a>3. JIT 컴파일러의 워밍업 시간</h4><p>Java는 처음에 바이트코드를 인터프리터로 실행하다가, 자주 호출되는 “핫스팟” 코드를 네이티브 코드로 컴파일하여 최적화합니다. 이 과정에서 초기 실행 성능이 상대적으로 느려집니다.</p><h2 id="성능에-미치는-영향"><a href="#성능에-미치는-영향" class="headerlink" title="성능에 미치는 영향"></a>성능에 미치는 영향</h2><p>실제 측정 결과를 살펴보면 Cold Start의 영향이 얼마나 큰지 알 수 있습니다:</p><table><thead><tr><th><strong>환경</strong></th><th><strong>Cold Start 시간</strong></th><th><strong>Warm Start 시간</strong></th></tr></thead><tbody><tr><td>단순 Java 애플리케이션</td><td>2-3초</td><td>100-200ms</td></tr><tr><td>Spring Boot 애플리케이션</td><td>10-15초</td><td>200-500ms</td></tr><tr><td>복잡한 엔터프라이즈 애플리케이션</td><td>20-30초</td><td>500ms-1초</td></tr></tbody></table><h2 id="Cold-Start-최적화-전략"><a href="#Cold-Start-최적화-전략" class="headerlink" title="Cold Start 최적화 전략"></a>Cold Start 최적화 전략</h2><h3 id="1-애플리케이션-레벨-최적화"><a href="#1-애플리케이션-레벨-최적화" class="headerlink" title="1. 애플리케이션 레벨 최적화"></a>1. 애플리케이션 레벨 최적화</h3><p><strong>불필요한 의존성 제거</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 사용하지 않는 의존성 제거 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>지연 로딩 활용</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeavyService</span> &#123;</span><br><span class="line">    <span class="comment">// 실제 사용될 때까지 초기화 지연</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Spring Boot 최적화 설정</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 데이터소스 초기화 지연</span><br><span class="line">spring.jpa.defer-datasource-initialization=true</span><br><span class="line"></span><br><span class="line"># 불필요한 자동 설정 비활성화</span><br><span class="line">spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span><br></pre></td></tr></table></figure><h3 id="2-JVM-튜닝"><a href="#2-JVM-튜닝" class="headerlink" title="2. JVM 튜닝"></a>2. JVM 튜닝</h3><p><strong>가비지 컬렉터 최적화</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -XX:+UseG1GC \</span><br><span class="line">     -XX:MaxGCPauseMillis=200 \</span><br><span class="line">     -XX:+UnlockExperimentalVMOptions \</span><br><span class="line">     -XX:+UseJVMCICompiler \</span><br><span class="line">     -jar myapp.jar</span><br></pre></td></tr></table></figure><p><strong>메모리 설정 최적화</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 힙 크기를 적절히 설정하여 초기화 시간 단축</span></span><br><span class="line">java -Xms512m -Xmx512m -jar myapp.jar</span><br></pre></td></tr></table></figure><h3 id="3-네이티브-이미지-컴파일"><a href="#3-네이티브-이미지-컴파일" class="headerlink" title="3. 네이티브 이미지 컴파일"></a>3. 네이티브 이미지 컴파일</h3><p>GraalVM Native Image는 Cold Start 문제의 가장 효과적인 해결책입니다:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GraalVM으로 네이티브 이미지 생성</span></span><br><span class="line">./mvnw spring-boot:build-image -Pnative</span><br></pre></td></tr></table></figure><p>네이티브 이미지의 장점:</p><ul><li>JVM 없이 실행 가능</li><li>메모리 사용량 대폭 감소</li><li>Cold Start 시간 90% 이상 단축</li></ul><h3 id="4-최신-프레임워크-활용"><a href="#4-최신-프레임워크-활용" class="headerlink" title="4. 최신 프레임워크 활용"></a>4. 최신 프레임워크 활용</h3><p><strong>Spring Native</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@NativeHint</span> <span class="comment">// 네이티브 컴파일 힌트 제공</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        [SpringApplication.run](http:<span class="comment">//SpringApplication.run)(MyApplication.class, args);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Quarkus</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloResource</span> &#123;</span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Produces(MediaType.TEXT_PLAIN)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Quarkus&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="서버리스-환경별-대응-방법"><a href="#서버리스-환경별-대응-방법" class="headerlink" title="서버리스 환경별 대응 방법"></a>서버리스 환경별 대응 방법</h2><h3 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a>AWS Lambda</h3><p><strong>Provisioned Concurrency 활용</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">MyFunction:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Lambda::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">ProvisionedConcurrencyConfig:</span></span><br><span class="line">        <span class="attr">ProvisionedConcurrencyExecutions:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>SnapStart 기능 활용</strong> (Java 11+)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AWS Lambda SnapStart로 초기화 시간 단축</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">implements</span> <span class="title class_">RequestHandler</span>&lt;String, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRequest</span><span class="params">(String input, Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> service.process(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Google-Cloud-Functions"><a href="#Google-Cloud-Functions" class="headerlink" title="Google Cloud Functions"></a>Google Cloud Functions</h3><p><strong>최소 인스턴스 설정</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> [<span class="string">serving.knative.dev/v1</span>]<span class="string">(http://serving.knative.dev/v1)</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    [<span class="string">autoscaling.knative.dev/minScale</span>]<span class="string">(http://autoscaling.knative.dev/minScale):</span> <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><h2 id="모니터링과-측정"><a href="#모니터링과-측정" class="headerlink" title="모니터링과 측정"></a>모니터링과 측정</h2><p>Cold Start 최적화의 효과를 확인하려면 적절한 모니터링이 필요합니다:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColdStartMonitor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">START_TIME</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationReady</span><span class="params">(ApplicationReadyEvent event)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startupTime</span> <span class="operator">=</span> System.currentTimeMillis() - START_TIME;</span><br><span class="line">        [logger.info](http:<span class="comment">//logger.info)(&quot;Application started in &#123;&#125; ms&quot;, startupTime);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 메트릭 수집</span></span><br><span class="line">        Metrics.timer(<span class="string">&quot;application.startup.time&quot;</span>)</span><br><span class="line">               .record(startupTime, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>Java의 Cold Start 문제는 서버리스 환경에서 피할 수 없는 도전이지만, 다양한 최적화 기법을 통해 크게 개선할 수 있습니다. 특히 GraalVM Native Image나 Spring Native 같은 최신 기술을 활용하면 기존의 단점을 상당 부분 해결할 수 있습니다.</p><p>중요한 것은 애플리케이션의 특성과 요구사항에 맞는 적절한 최적화 전략을 선택하는 것입니다. 단순한 API 서버라면 의존성 최소화만으로도 충분할 수 있고, 복잡한 엔터프라이즈 애플리케이션이라면 네이티브 이미지 컴파일을 고려해볼 만합니다.</p><p>Java 생태계는 계속 발전하고 있으며, Cold Start 문제에 대한 해결책들도 지속적으로 개선되고 있습니다. 최신 기술 동향을 주시하면서 자신의 프로젝트에 가장 적합한 방법을 찾아 적용해보시기 바랍니다.</p>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/">프로그래밍 언어</category>
      
      <category domain="https://ckck803.github.io/categories/CS/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/JAVA/">JAVA</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/31/computer-science/java/cold-start/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring Boot] - 스프링 프로퍼티 암호화</title>
      <link>https://ckck803.github.io/2025/08/21/spring/spring-framework/springboot-property-encrypt/</link>
      <guid>https://ckck803.github.io/2025/08/21/spring/spring-framework/springboot-property-encrypt/</guid>
      <pubDate>Wed, 20 Aug 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/springboot/spring-boot-logo.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링부트-민감정보-암호화-하기&quot;&gt;&lt;a href=&quot;#스프링부트-민감정보-암호화-하기&quot; class=&quot;headerlink&quot; title=&quot;스프링부트 민감정보 암호화 하기&quot;&gt;&lt;/a&gt;스프링부트 민감정보 암호화 하기&lt;/h2&gt;&lt;p&gt;운영 중인 프로그램에서 DB 암호나 API 키와 같은 민감 정보를 설정 파일에 평문으로 저장할 경우, 프로그램이 유출되면 그대로 외부에 노출되는 심각한 보안 문제가 발생할 수 있습니다. 이를 방지하기 위해 프로퍼티 암호화를 적용하면, 설정값이 유출되더라도 평문이 아닌 암호화된 형태로만 노출되므로 보안성을 크게 강화할 수 있습니다.&lt;/p&gt;
&lt;p&gt;자바 환경에서는 이러한 암·복호화를 손쉽게 지원하는 Jasypt 모듈을 활용할 수 있어, 운영 환경에서 안전하게 민감 정보를 관리할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이번 포스팅에서는 Spring boot 에 Jaspyt 적용해 프로퍼티를 암복호화 하는 내용을 작성했습니다&lt;/p&gt;
&lt;h2 id=&quot;암복호화를-위한-라이브러리-추가&quot;&gt;&lt;a href=&quot;#암복호화를-위한-라이브러리-추가&quot; class=&quot;headerlink&quot; title=&quot;암복호화를 위한 라이브러리 추가&quot;&gt;&lt;/a&gt;암복호화를 위한 라이브러리 추가&lt;/h2&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Jasypt for property encryption&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementation &lt;span class=&quot;string&quot;&gt;&amp;#x27;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;값-암호화-하기&quot;&gt;&lt;a href=&quot;#값-암호화-하기&quot; class=&quot;headerlink&quot; title=&quot;값 암호화 하기&quot;&gt;&lt;/a&gt;값 암호화 하기&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -&lt;span class=&quot;built_in&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;build/libs/app.jar&amp;quot;&lt;/span&gt; com.ulisesbocchio.jasyptspringboot.cli.JasyptEncryptorCLI &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  input=&lt;span class=&quot;string&quot;&gt;&amp;quot;my-db-pass&amp;quot;&lt;/span&gt; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  password=&lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;JASYPT_ENCRYPTOR_PASSWORD&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  algorithm=&lt;span class=&quot;string&quot;&gt;&amp;quot;PBEWITHHMACSHA512ANDAES_256&amp;quot;&lt;/span&gt; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ivGeneratorClassName=&lt;span class=&quot;string&quot;&gt;&amp;quot;org.jasypt.iv.RandomIvGenerator&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;Configuration-추가&quot;&gt;&lt;a href=&quot;#Configuration-추가&quot; class=&quot;headerlink&quot; title=&quot;Configuration 추가&quot;&gt;&lt;/a&gt;Configuration 추가&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/springboot/spring-boot-logo.png"></p><h2 id="스프링부트-민감정보-암호화-하기"><a href="#스프링부트-민감정보-암호화-하기" class="headerlink" title="스프링부트 민감정보 암호화 하기"></a>스프링부트 민감정보 암호화 하기</h2><p>운영 중인 프로그램에서 DB 암호나 API 키와 같은 민감 정보를 설정 파일에 평문으로 저장할 경우, 프로그램이 유출되면 그대로 외부에 노출되는 심각한 보안 문제가 발생할 수 있습니다. 이를 방지하기 위해 프로퍼티 암호화를 적용하면, 설정값이 유출되더라도 평문이 아닌 암호화된 형태로만 노출되므로 보안성을 크게 강화할 수 있습니다.</p><p>자바 환경에서는 이러한 암·복호화를 손쉽게 지원하는 Jasypt 모듈을 활용할 수 있어, 운영 환경에서 안전하게 민감 정보를 관리할 수 있습니다.</p><p>이번 포스팅에서는 Spring boot 에 Jaspyt 적용해 프로퍼티를 암복호화 하는 내용을 작성했습니다</p><h2 id="암복호화를-위한-라이브러리-추가"><a href="#암복호화를-위한-라이브러리-추가" class="headerlink" title="암복호화를 위한 라이브러리 추가"></a>암복호화를 위한 라이브러리 추가</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jasypt for property encryption</span></span><br><span class="line">implementation <span class="string">&#x27;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="값-암호화-하기"><a href="#값-암호화-하기" class="headerlink" title="값 암호화 하기"></a>값 암호화 하기</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> <span class="string">&quot;build/libs/app.jar&quot;</span> com.ulisesbocchio.jasyptspringboot.cli.JasyptEncryptorCLI \</span><br><span class="line">  input=<span class="string">&quot;my-db-pass&quot;</span> \</span><br><span class="line">  password=<span class="string">&quot;<span class="variable">$&#123;JASYPT_ENCRYPTOR_PASSWORD&#125;</span>&quot;</span> \</span><br><span class="line">  algorithm=<span class="string">&quot;PBEWITHHMACSHA512ANDAES_256&quot;</span> \</span><br><span class="line">  ivGeneratorClassName=<span class="string">&quot;org.jasypt.iv.RandomIvGenerator&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Configuration-추가"><a href="#Configuration-추가" class="headerlink" title="Configuration 추가"></a>Configuration 추가</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableEncryptableProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyptConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jasypt.encryptor.password:defaultPassword&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String encryptorPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;jasyptStringEncryptor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> StringEncryptor <span class="title function_">stringEncryptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PooledPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledPBEStringEncryptor</span>();</span><br><span class="line">        <span class="type">SimpleStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleStringPBEConfig</span>();</span><br><span class="line">        config.setPassword(encryptorPassword);</span><br><span class="line">        config.setAlgorithm(<span class="string">&quot;PBEWITHHMACSHA512ANDAES_256&quot;</span>);</span><br><span class="line">        config.setKeyObtentionIterations(<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        config.setPoolSize(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        config.setProviderName(<span class="string">&quot;SunJCE&quot;</span>);</span><br><span class="line">        config.setSaltGeneratorClassName(<span class="string">&quot;org.jasypt.salt.RandomSaltGenerator&quot;</span>);</span><br><span class="line">        config.setIvGeneratorClassName(<span class="string">&quot;org.jasypt.iv.RandomIvGenerator&quot;</span>);</span><br><span class="line">        config.setStringOutputType(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> encryptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="설정-값-추가"><a href="#설정-값-추가" class="headerlink" title="설정 값 추가"></a>설정 값 추가</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jasypt:</span><br><span class="line">  encryptor:</span><br><span class="line">    password: $&#123;JASYPT_PASSWORD:defaultPassword&#125;</span><br><span class="line">    algorithm: PBEWITHHMACSHA512ANDAES_256</span><br><span class="line">    iv-generator-classname: org.jasypt.iv.RandomIvGenerator</span><br><span class="line">    salt-generator-classname: org.jasypt.salt.RandomSaltGenerator</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://ckck803.github.io/categories/Spring/Spring-Framework/">Spring Framework</category>
      
      
      <category domain="https://ckck803.github.io/tags/JPA/">JPA</category>
      
      
      <comments>https://ckck803.github.io/2025/08/21/spring/spring-framework/springboot-property-encrypt/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Java] - 가비지 컬렉션 히스토리</title>
      <link>https://ckck803.github.io/2025/08/20/computer-science/java/gc-history/</link>
      <guid>https://ckck803.github.io/2025/08/20/computer-science/java/gc-history/</guid>
      <pubDate>Tue, 19 Aug 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/java/java.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2022/05/05/computer-science/java/gc-tunning/&quot; title=&quot;[JAVA] - 가비지 컬렉션 튜닝&quot;&gt;[JAVA] - 가비지 컬렉션 튜닝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/02/computer-science/java/garbage-collection/&quot; title=&quot;[JAVA] - Garbage Collection(가비지 컬렉션)&quot;&gt;[JAVA] - Garbage Collection(가비지 컬렉션)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/12/02/computer-science/java/jvm/&quot; title=&quot;[JAVA] - JVM (자바 가상 머신)&quot;&gt;[JAVA] - JVM (자바 가상 머신)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;초기-GC들-JDK-1-0-1-4&quot;&gt;&lt;a href=&quot;#초기-GC들-JDK-1-0-1-4&quot; class=&quot;headerlink&quot; title=&quot;초기 GC들 (JDK 1.0~1.4)&quot;&gt;&lt;/a&gt;초기 GC들 (JDK 1.0~1.4)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Serial GC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가장 오래된 GC&lt;/li&gt;
&lt;li&gt;단일 스레드로 동작&lt;/li&gt;
&lt;li&gt;작은 애플리케이션이나 클라이언트 환경에 적합&lt;/li&gt;
&lt;li&gt;Stop-the-World 시간이 길어서 현재는 제한적으로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parallel GC (Throughput Collector)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 1.4에서 도입&lt;/li&gt;
&lt;li&gt;멀티코어 환경에서 여러 스레드를 사용해 처리량을 개선&lt;/li&gt;
&lt;li&gt;JDK 6~8에서 기본 GC&lt;/li&gt;
&lt;li&gt;여전히 긴 정지 시간이 단점&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;저지연-목표-GC들-JDK-1-4&quot;&gt;&lt;a href=&quot;#저지연-목표-GC들-JDK-1-4&quot; class=&quot;headerlink&quot; title=&quot;저지연 목표 GC들 (JDK 1.4~)&quot;&gt;&lt;/a&gt;저지연 목표 GC들 (JDK 1.4~)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Concurrent Mark Sweep (CMS) GC&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/java/java.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2022/05/05/computer-science/java/gc-tunning/" title="[JAVA] - 가비지 컬렉션 튜닝">[JAVA] - 가비지 컬렉션 튜닝</a></li><li><a href="/2021/12/02/computer-science/java/garbage-collection/" title="[JAVA] - Garbage Collection(가비지 컬렉션)">[JAVA] - Garbage Collection(가비지 컬렉션)</a></li><li><a href="/2021/12/02/computer-science/java/jvm/" title="[JAVA] - JVM (자바 가상 머신)">[JAVA] - JVM (자바 가상 머신)</a></li></ul><h3 id="초기-GC들-JDK-1-0-1-4"><a href="#초기-GC들-JDK-1-0-1-4" class="headerlink" title="초기 GC들 (JDK 1.0~1.4)"></a>초기 GC들 (JDK 1.0~1.4)</h3><p><strong>Serial GC</strong></p><ul><li>가장 오래된 GC</li><li>단일 스레드로 동작</li><li>작은 애플리케이션이나 클라이언트 환경에 적합</li><li>Stop-the-World 시간이 길어서 현재는 제한적으로 사용</li></ul><p><strong>Parallel GC (Throughput Collector)</strong></p><ul><li>JDK 1.4에서 도입</li><li>멀티코어 환경에서 여러 스레드를 사용해 처리량을 개선</li><li>JDK 6~8에서 기본 GC</li><li>여전히 긴 정지 시간이 단점</li></ul><h3 id="저지연-목표-GC들-JDK-1-4"><a href="#저지연-목표-GC들-JDK-1-4" class="headerlink" title="저지연 목표 GC들 (JDK 1.4~)"></a>저지연 목표 GC들 (JDK 1.4~)</h3><p><strong>Concurrent Mark Sweep (CMS) GC</strong></p><ul><li>JDK 1.4에서 실험적으로 도입</li><li>JDK 6에서 정식 출시</li><li>애플리케이션과 동시에 실행되어 정지 시간을 줄임</li><li>메모리 단편화와 CPU 오버헤드 문제로 JDK 14에서 제거</li></ul><h3 id="현대적-GC들-JDK-7"><a href="#현대적-GC들-JDK-7" class="headerlink" title="현대적 GC들 (JDK 7~)"></a>현대적 GC들 (JDK 7~)</h3><p><strong>G1 GC (Garbage First)</strong></p><ul><li>JDK 7에서 도입</li><li>JDK 9부터 기본 GC</li><li>힙을 여러 region으로 나누어 관리</li><li>예측 가능한 정지 시간을 제공</li><li>대용량 힙(6GB 이상)에서 특히 효과적</li></ul><h3 id="최신-저지연-GC들-JDK-11"><a href="#최신-저지연-GC들-JDK-11" class="headerlink" title="최신 저지연 GC들 (JDK 11~)"></a>최신 저지연 GC들 (JDK 11~)</h3><p><strong>ZGC (Z Garbage Collector)</strong></p><ul><li>JDK 11에서 실험적으로 도입</li><li>힙 크기에 관계없이 10ms 미만의 매우 짧은 정지 시간을 목표</li><li>대용량 메모리 환경에 최적화</li></ul><p><strong>Shenandoah GC</strong></p><ul><li>Red Hat에서 개발</li><li>JDK 12에서 실험적으로 포함</li><li>ZGC와 유사하게 저지연을 목표</li><li>상대적으로 작은 힙에서도 효과적</li></ul><h3 id="최신-개발-JDK-15"><a href="#최신-개발-JDK-15" class="headerlink" title="최신 개발 (JDK 15~)"></a>최신 개발 (JDK 15~)</h3><p><strong>Epsilon GC</strong></p><ul><li>JDK 11에서 도입된 “no-op” GC</li><li>실제로는 메모리를 회수하지 않음</li><li>성능 테스트나 매우 짧은 실행 시간의 애플리케이션용으로 설계</li></ul>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/Network/">Network</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/20/computer-science/java/gc-history/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Javascript] Axios 파일 업로드 및 다운로드</title>
      <link>https://ckck803.github.io/2025/08/13/javascript/axios-file/</link>
      <guid>https://ckck803.github.io/2025/08/13/javascript/axios-file/</guid>
      <pubDate>Tue, 12 Aug 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/javascript/axios.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;파일-업로드-및-다운로드&quot;&gt;&lt;a href=&quot;#파일-업로드-및-다운로드&quot; class=&quot;headerlink&quot; title=&quot;파일 업로드 및 다운로드&quot;&gt;&lt;/a&gt;파일 업로드 및 다운로드&lt;/h2&gt;&lt;h3 id=&quot;📁-파일-업로드&quot;&gt;&lt;a href=&quot;#📁-파일-업로드&quot; class=&quot;headerlink&quot; title=&quot;📁 파일 업로드&quot;&gt;&lt;/a&gt;📁 파일 업로드&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 단일 파일 업로드&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;uploadFile&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;file, onProgress&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; formData = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;FormData&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  formData.&lt;span class=&quot;title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  formData.&lt;span class=&quot;title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;category&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;documents&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  formData.&lt;span class=&quot;title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;description&amp;#x27;&lt;/span&gt;, [file.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//file.name));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; [axios.&lt;span class=&quot;property&quot;&gt;post&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//axios.post)(&amp;#x27;/api/upload&amp;#x27;, formData, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;multipart/form-data&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;onUploadProgress&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;progressEvent&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; percentCompleted = &lt;span class=&quot;title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;round&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          (progressEvent.&lt;span class=&quot;property&quot;&gt;loaded&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) / [progressEvent.&lt;span class=&quot;property&quot;&gt;total&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//progressEvent.total)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`업로드 진행률: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;percentCompleted&amp;#125;&lt;/span&gt;%`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onProgress?.(percentCompleted);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;파일 업로드 실패:&amp;#x27;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 다중 파일 업로드&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;uploadMultipleFiles&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;files&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; formData = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;FormData&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  files.&lt;span class=&quot;title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;file, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    formData.&lt;span class=&quot;title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`files`&lt;/span&gt;, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; [axios.&lt;span class=&quot;property&quot;&gt;post&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//axios.post)(&amp;#x27;/api/upload/multiple&amp;#x27;, formData, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;multipart/form-data&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용 예시&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fileInput = &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;fileInput&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fileInput.&lt;span class=&quot;title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (event) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; file = [event.&lt;span class=&quot;property&quot;&gt;target&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//event.target).files[0];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;uploadFile&lt;/span&gt;(file, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;progress&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`업로드 진행률: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;progress&amp;#125;&lt;/span&gt;%`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;업로드 완료:&amp;#x27;&lt;/span&gt;, result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;업로드 에러:&amp;#x27;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;📥-파일-다운로드&quot;&gt;&lt;a href=&quot;#📥-파일-다운로드&quot; class=&quot;headerlink&quot; title=&quot;📥 파일 다운로드&quot;&gt;&lt;/a&gt;📥 파일 다운로드&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 파일 다운로드&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;downloadFile&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fileId, filename&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; axios.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`/api/files/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;fileId&amp;#125;&lt;/span&gt;/download`&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;responseType&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;blob&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Blob을 사용하여 파일 다운로드 트리거&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; url = &lt;span class=&quot;variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;createObjectURL&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Blob&lt;/span&gt;([[response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data)]));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; link = &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link.&lt;span class=&quot;property&quot;&gt;href&lt;/span&gt; = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link.&lt;span class=&quot;title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;appendChild&lt;/span&gt;(link);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [link.&lt;span class=&quot;property&quot;&gt;click&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//link.click)();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;removeChild&lt;/span&gt;(link);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 메모리 정리&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;revokeObjectURL&lt;/span&gt;(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;파일 다운로드 실패:&amp;#x27;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&quot;에러-처리-베스트-프랙티스&quot;&gt;&lt;a href=&quot;#에러-처리-베스트-프랙티스&quot; class=&quot;headerlink&quot; title=&quot;에러 처리 베스트 프랙티스&quot;&gt;&lt;/a&gt;에러 처리 베스트 프랙티스&lt;/h2&gt;&lt;h3 id=&quot;🛡️-포괄적인-에러-처리&quot;&gt;&lt;a href=&quot;#🛡️-포괄적인-에러-처리&quot; class=&quot;headerlink&quot; title=&quot;🛡️ 포괄적인 에러 처리&quot;&gt;&lt;/a&gt;🛡️ 포괄적인 에러 처리&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 에러 타입별 처리 함수&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handleApiError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 서버가 응답했지만 상태 코드가 2xx 범위를 벗어남&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; status, data &amp;#125; = error.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;잘못된 요청:&amp;#x27;&lt;/span&gt;, data.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;401&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;인증 실패 - 로그인이 필요합니다&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 로그인 페이지로 리다이렉트&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;href&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/login&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;접근 권한이 없습니다&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;요청한 리소스를 찾을 수 없습니다&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;429&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;서버 내부 오류가 발생했습니다&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`서버 오류 (&lt;span class=&quot;subst&quot;&gt;$&amp;#123;status&amp;#125;&lt;/span&gt;):`&lt;/span&gt;, data.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;response&amp;#x27;&lt;/span&gt;, status, &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: data.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error.&lt;span class=&quot;property&quot;&gt;request&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 요청은 전송되었지만 응답을 받지 못함 (네트워크 오류)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;네트워크 오류: 서버에 연결할 수 없습니다&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;network&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;네트워크 연결을 확인해주세요&amp;#x27;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 요청 설정 중에 오류 발생&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;요청 설정 오류:&amp;#x27;&lt;/span&gt;, error.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;config&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: error.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 재시도 로직이 포함된 API 호출&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;apiCallWithRetry&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;requestFn, maxRetries = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, delay = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; attempt = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; attempt &amp;lt;= maxRetries; attempt++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;requestFn&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; errorInfo = &lt;span class=&quot;title function_&quot;&gt;handleApiError&lt;/span&gt;(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (attempt === maxRetries || errorInfo.&lt;span class=&quot;property&quot;&gt;type&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;&amp;#x27;response&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; error; &lt;span class=&quot;comment&quot;&gt;// 최대 재시도 횟수 도달 또는 서버 응답 오류&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`재시도 &lt;span class=&quot;subst&quot;&gt;$&amp;#123;attempt&amp;#125;&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;maxRetries&amp;#125;&lt;/span&gt; - &lt;span class=&quot;subst&quot;&gt;$&amp;#123;delay&amp;#125;&lt;/span&gt;ms 후 다시 시도...`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(resolve, delay * attempt));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용 예시&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;fetchUserData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;apiCallWithRetry&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; axios.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`/api/users/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;userId&amp;#125;&lt;/span&gt;`&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 최대 3번 재시도&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 1초 간격&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/javascript/axios.png"></p><h2 id="파일-업로드-및-다운로드"><a href="#파일-업로드-및-다운로드" class="headerlink" title="파일 업로드 및 다운로드"></a>파일 업로드 및 다운로드</h2><h3 id="📁-파일-업로드"><a href="#📁-파일-업로드" class="headerlink" title="📁 파일 업로드"></a>📁 파일 업로드</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 단일 파일 업로드</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params">file, onProgress</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;documents&#x27;</span>);</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;description&#x27;</span>, [file.<span class="property">name</span>](<span class="attr">http</span>:<span class="comment">//file.name));</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/api/upload&#x27;, formData, &#123;</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onUploadProgress</span>: <span class="function">(<span class="params">progressEvent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> percentCompleted = <span class="title class_">Math</span>.<span class="title function_">round</span>(</span><br><span class="line">          (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / [progressEvent.<span class="property">total</span>](<span class="attr">http</span>:<span class="comment">//progressEvent.total)</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`업로드 진행률: <span class="subst">$&#123;percentCompleted&#125;</span>%`</span>);</span><br><span class="line">        onProgress?.(percentCompleted);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;파일 업로드 실패:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 다중 파일 업로드</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadMultipleFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  </span><br><span class="line">  files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, index</span>) =&gt;</span> &#123;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">`files`</span>, file);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/api/upload/multiple&#x27;, formData, &#123;</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예시</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span><br><span class="line">fileInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = [event.<span class="property">target</span>](<span class="attr">http</span>:<span class="comment">//event.target).files[0];</span></span><br><span class="line">  <span class="keyword">if</span> (file) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">uploadFile</span>(file, <span class="function">(<span class="params">progress</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`업로드 진행률: <span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;업로드 완료:&#x27;</span>, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;업로드 에러:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="📥-파일-다운로드"><a href="#📥-파일-다운로드" class="headerlink" title="📥 파일 다운로드"></a>📥 파일 다운로드</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 파일 다운로드</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">downloadFile</span>(<span class="params">fileId, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`/api/files/<span class="subst">$&#123;fileId&#125;</span>/download`</span>, &#123;</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Blob을 사용하여 파일 다운로드 트리거</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([[response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data)]));</span></span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.<span class="property">href</span> = url;</span><br><span class="line">    link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, filename);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">    [link.<span class="property">click</span>](<span class="attr">http</span>:<span class="comment">//link.click)();</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 메모리 정리</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;파일 다운로드 실패:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="에러-처리-베스트-프랙티스"><a href="#에러-처리-베스트-프랙티스" class="headerlink" title="에러 처리 베스트 프랙티스"></a>에러 처리 베스트 프랙티스</h2><h3 id="🛡️-포괄적인-에러-처리"><a href="#🛡️-포괄적인-에러-처리" class="headerlink" title="🛡️ 포괄적인 에러 처리"></a>🛡️ 포괄적인 에러 처리</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 에러 타입별 처리 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleApiError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 서버가 응답했지만 상태 코드가 2xx 범위를 벗어남</span></span><br><span class="line">    <span class="keyword">const</span> &#123; status, data &#125; = error.<span class="property">response</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;잘못된 요청:&#x27;</span>, data.<span class="property">message</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;인증 실패 - 로그인이 필요합니다&#x27;</span>);</span><br><span class="line">        <span class="comment">// 로그인 페이지로 리다이렉트</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;접근 권한이 없습니다&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;요청한 리소스를 찾을 수 없습니다&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">429</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;서버 내부 오류가 발생했습니다&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`서버 오류 (<span class="subst">$&#123;status&#125;</span>):`</span>, data.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;response&#x27;</span>, status, <span class="attr">message</span>: data.<span class="property">message</span> &#125;;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">    <span class="comment">// 요청은 전송되었지만 응답을 받지 못함 (네트워크 오류)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;네트워크 오류: 서버에 연결할 수 없습니다&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;network&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;네트워크 연결을 확인해주세요&#x27;</span> &#125;;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 요청 설정 중에 오류 발생</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;요청 설정 오류:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;config&#x27;</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 재시도 로직이 포함된 API 호출</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">apiCallWithRetry</span>(<span class="params">requestFn, maxRetries = <span class="number">3</span>, delay = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> attempt = <span class="number">1</span>; attempt &lt;= maxRetries; attempt++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">requestFn</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorInfo = <span class="title function_">handleApiError</span>(error);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (attempt === maxRetries || errorInfo.<span class="property">type</span> === <span class="string">&#x27;response&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> error; <span class="comment">// 최대 재시도 횟수 도달 또는 서버 응답 오류</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`재시도 <span class="subst">$&#123;attempt&#125;</span>/<span class="subst">$&#123;maxRetries&#125;</span> - <span class="subst">$&#123;delay&#125;</span>ms 후 다시 시도...`</span>);</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay * attempt));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예시</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">apiCallWithRetry</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> axios.<span class="title function_">get</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>),</span><br><span class="line">    <span class="number">3</span>, <span class="comment">// 최대 3번 재시도</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 1초 간격</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="성능-최적화-팁"><a href="#성능-최적화-팁" class="headerlink" title="성능 최적화 팁"></a>성능 최적화 팁</h2><h3 id="⚡-요청-최적화-기법"><a href="#⚡-요청-최적화-기법" class="headerlink" title="⚡ 요청 최적화 기법"></a>⚡ 요청 최적화 기법</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 요청 취소 (AbortController 사용)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApiService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetchData</span>(<span class="params">endpoint, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 이전 요청이 있다면 취소</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">has</span>(endpoint)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">get</span>(endpoint).<span class="title function_">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">set</span>(endpoint, controller);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(endpoint, &#123;</span><br><span class="line">        ...options,</span><br><span class="line">        <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">delete</span>(endpoint);</span><br><span class="line">      <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">delete</span>(endpoint);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;요청이 취소되었습니다:&#x27;</span>, endpoint);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 모든 대기중인 요청 취소</span></span><br><span class="line">  <span class="title function_">cancelAllRequests</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">controller</span> =&gt;</span> controller.<span class="title function_">abort</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 요청 디바운싱 (검색 등에 유용)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">executedFunction</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">later</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      <span class="title function_">func</span>(...args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 검색 API 호출 최적화</span></span><br><span class="line"><span class="keyword">const</span> debouncedSearch = <span class="title function_">debounce</span>(<span class="keyword">async</span> (query) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (query.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/search&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; <span class="attr">q</span>: query &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;검색 결과:&#x27;</span>, [results.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//results.data));</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 동시 요청 제한</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RateLimitedApi</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">maxConcurrent = <span class="number">5</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> = maxConcurrent;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(&#123; config, resolve, reject &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">processQueue</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">running</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> || <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span>++;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">axios</span>(config);</span><br><span class="line">      <span class="title function_">resolve</span>(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">running</span>--;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">processQueue</span>(); <span class="comment">// 다음 요청 처리</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rateLimitedApi = <span class="keyword">new</span> <span class="title class_">RateLimitedApi</span>(<span class="number">3</span>); <span class="comment">// 최대 3개 동시 요청</span></span><br></pre></td></tr></table></figure><hr><h2 id="🎯-마무리"><a href="#🎯-마무리" class="headerlink" title="🎯 마무리"></a>🎯 마무리</h2><p>Axios는 JavaScript 생태계에서 가장 강력하고 유연한 HTTP 클라이언트 라이브러리입니다. 이 가이드에서 다룬 내용들을 실제 프로젝트에 적용하면 더욱 안정적이고 효율적인 API 통신을 구현할 수 있습니다.</p><h3 id="핵심-포인트-정리"><a href="#핵심-포인트-정리" class="headerlink" title="핵심 포인트 정리"></a>핵심 포인트 정리</h3><p>✅ <strong>인스턴스 활용</strong>: 공통 설정을 가진 인스턴스로 코드 중복 제거<br>✅ <strong>인터셉터 사용</strong>: 인증, 로깅, 에러처리 등 공통 로직 처리<br>✅ <strong>에러 처리</strong>: 다양한 에러 상황에 대한 체계적인 대응<br>✅ <strong>성능 최적화</strong>: 요청 취소, 디바운싱, 동시 요청 제한<br>✅ <strong>타입 안정성</strong>: TypeScript와 함께 사용하여 더욱 안전한 코드 작성</p><p>Axios를 마스터하여 더 나은 웹 애플리케이션을 만들어보세요! 🚀</p><hr>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/Network/">Network</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/13/javascript/axios-file/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Javascript] Axios 인터셉터</title>
      <link>https://ckck803.github.io/2025/08/12/javascript/axios-interceptor/</link>
      <guid>https://ckck803.github.io/2025/08/12/javascript/axios-interceptor/</guid>
      <pubDate>Mon, 11 Aug 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/javascript/axios.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;인터셉터로-요청-응답-제어하기&quot;&gt;&lt;a href=&quot;#인터셉터로-요청-응답-제어하기&quot; class=&quot;headerlink&quot; title=&quot;인터셉터로 요청&amp;#x2F;응답 제어하기&quot;&gt;&lt;/a&gt;인터셉터로 요청&amp;#x2F;응답 제어하기&lt;/h2&gt;&lt;h3 id=&quot;📤-요청-인터셉터&quot;&gt;&lt;a href=&quot;#📤-요청-인터셉터&quot; class=&quot;headerlink&quot; title=&quot;📤 요청 인터셉터&quot;&gt;&lt;/a&gt;📤 요청 인터셉터&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 모든 요청에 공통 로직 적용&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.&lt;span class=&quot;property&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;config&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 요청 시작 로그&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`🚀 API 요청: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;config.method?.toUpperCase()&amp;#125;&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;$&amp;#123;config.url&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 인증 토큰 자동 추가&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; token = &lt;span class=&quot;variable language_&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;accessToken&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config.&lt;span class=&quot;property&quot;&gt;headers&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;Authorization&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;`Bearer &lt;span class=&quot;subst&quot;&gt;$&amp;#123;token&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 요청 시간 기록 (성능 측정용)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    config.&lt;span class=&quot;property&quot;&gt;metadata&lt;/span&gt; = &amp;#123; &lt;span class=&quot;attr&quot;&gt;startTime&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Date&lt;/span&gt;() &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; config;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;❌ 요청 설정 오류:&amp;#x27;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;reject&lt;/span&gt;(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;📥-응답-인터셉터&quot;&gt;&lt;a href=&quot;#📥-응답-인터셉터&quot; class=&quot;headerlink&quot; title=&quot;📥 응답 인터셉터&quot;&gt;&lt;/a&gt;📥 응답 인터셉터&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 모든 응답에 공통 로직 적용&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.&lt;span class=&quot;property&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 응답 시간 계산&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; endTime = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; duration = endTime - response.&lt;span class=&quot;property&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;metadata&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;startTime&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`✅ API 응답: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;response.config.url&amp;#125;&lt;/span&gt; (&lt;span class=&quot;subst&quot;&gt;$&amp;#123;duration&amp;#125;&lt;/span&gt;ms)`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (error) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; originalRequest = error.&lt;span class=&quot;property&quot;&gt;config&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 401 에러: 토큰 갱신 처리&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;401&lt;/span&gt; &amp;amp;&amp;amp; !originalRequest.&lt;span class=&quot;property&quot;&gt;_retry&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      originalRequest.&lt;span class=&quot;property&quot;&gt;_retry&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; refreshToken = &lt;span class=&quot;variable language_&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;refreshToken&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; [axios.&lt;span class=&quot;property&quot;&gt;post&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//axios.post)(&amp;#x27;/auth/refresh&amp;#x27;, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          refreshToken&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newToken = [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data).accessToken;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;setItem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;accessToken&amp;#x27;&lt;/span&gt;, newToken);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 원래 요청에 새 토큰 적용 후 재시도&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        originalRequest.&lt;span class=&quot;property&quot;&gt;headers&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;Authorization&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;`Bearer &lt;span class=&quot;subst&quot;&gt;$&amp;#123;newToken&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;axios&lt;/span&gt;(originalRequest);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (refreshError) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 토큰 갱신 실패 시 로그인 페이지로 리다이렉트&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;clear&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;href&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/login&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 에러 로깅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;❌ API 에러:&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: error.&lt;span class=&quot;property&quot;&gt;config&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;url&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: error.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;status&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: error.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;reject&lt;/span&gt;(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&quot;실전-예제-API-클래스-구현&quot;&gt;&lt;a href=&quot;#실전-예제-API-클래스-구현&quot; class=&quot;headerlink&quot; title=&quot;실전 예제: API 클래스 구현&quot;&gt;&lt;/a&gt;실전 예제: API 클래스 구현&lt;/h2&gt;&lt;h3 id=&quot;🏢-사용자-관리-API-클래스&quot;&gt;&lt;a href=&quot;#🏢-사용자-관리-API-클래스&quot; class=&quot;headerlink&quot; title=&quot;🏢 사용자 관리 API 클래스&quot;&gt;&lt;/a&gt;🏢 사용자 관리 API 클래스&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt; = axios.&lt;span class=&quot;title function_&quot;&gt;create&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;baseURL&lt;/span&gt;: process.&lt;span class=&quot;property&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;REACT_APP_API_URL&lt;/span&gt; || &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://api.example.com&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;setupInterceptors&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;setupInterceptors&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 요청 인터셉터: 인증 토큰 자동 추가&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;config&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; token = &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getAuthToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        config.&lt;span class=&quot;property&quot;&gt;headers&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;Authorization&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;`Bearer &lt;span class=&quot;subst&quot;&gt;$&amp;#123;token&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; config;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 응답 인터셉터: 에러 처리&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; response,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;handleError&lt;/span&gt;(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;getAuthToken&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;authToken&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;handleError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; message = error.&lt;span class=&quot;property&quot;&gt;response&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt; || error.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`API 요청 실패: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;message&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 사용자 목록 조회&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getUsers&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;options = &amp;#123;&amp;#125;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; page = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, limit = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, search = &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &amp;#125; = options;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/users&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;params&lt;/span&gt;: &amp;#123; page, limit, search &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;users&lt;/span&gt;: [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data.data),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;totalCount&lt;/span&gt;: [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;total&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data.total),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;currentPage&lt;/span&gt;: page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 사용자 상세 조회&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getUserById&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`/users/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;userId&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 사용자 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;createUser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userData&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; [&lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;post&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//this.client.post)(&amp;#x27;/users&amp;#x27;, userData);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 사용자 정보 수정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;updateUser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userId, userData&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`/users/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;userId&amp;#125;&lt;/span&gt;`&lt;/span&gt;, userData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 사용자 삭제&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;deleteUser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`/users/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;userId&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, userId &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 사용자 검색&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;searchUsers&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;query&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/users/search&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;params&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;q&lt;/span&gt;: query &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [response.&lt;span class=&quot;property&quot;&gt;data&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//response.data);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 싱글톤 패턴으로 사용&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; userService = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserService&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 사용 예시&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handleUserOperations&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 사용자 목록 조회&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; userList = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; userService.&lt;span class=&quot;title function_&quot;&gt;getUsers&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;page&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;search&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;john&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;사용자 목록:&amp;#x27;&lt;/span&gt;, userList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 새 사용자 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newUser = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; userService.&lt;span class=&quot;title function_&quot;&gt;createUser&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;김개발&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;[kim.dev@example.com](mailto:kim.dev@example.com)&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;developer&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;생성된 사용자:&amp;#x27;&lt;/span&gt;, newUser);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 사용자 정보 수정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; updatedUser = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; userService.&lt;span class=&quot;title function_&quot;&gt;updateUser&lt;/span&gt;([newUser.&lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;](&lt;span class=&quot;attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//newUser.id), &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;김시니어&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;senior-developer&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;수정된 사용자:&amp;#x27;&lt;/span&gt;, updatedUser);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;사용자 작업 중 오류:&amp;#x27;&lt;/span&gt;, error.&lt;span class=&quot;property&quot;&gt;message&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/javascript/axios.png"></p><h2 id="인터셉터로-요청-응답-제어하기"><a href="#인터셉터로-요청-응답-제어하기" class="headerlink" title="인터셉터로 요청&#x2F;응답 제어하기"></a>인터셉터로 요청&#x2F;응답 제어하기</h2><h3 id="📤-요청-인터셉터"><a href="#📤-요청-인터셉터" class="headerlink" title="📤 요청 인터셉터"></a>📤 요청 인터셉터</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 모든 요청에 공통 로직 적용</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 요청 시작 로그</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 API 요청: <span class="subst">$&#123;config.method?.toUpperCase()&#125;</span> <span class="subst">$&#123;config.url&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 인증 토큰 자동 추가</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 요청 시간 기록 (성능 측정용)</span></span><br><span class="line">    config.<span class="property">metadata</span> = &#123; <span class="attr">startTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;❌ 요청 설정 오류:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="📥-응답-인터셉터"><a href="#📥-응답-인터셉터" class="headerlink" title="📥 응답 인터셉터"></a>📥 응답 인터셉터</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 모든 응답에 공통 로직 적용</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 응답 시간 계산</span></span><br><span class="line">    <span class="keyword">const</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> duration = endTime - response.<span class="property">config</span>.<span class="property">metadata</span>.<span class="property">startTime</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`✅ API 응답: <span class="subst">$&#123;response.config.url&#125;</span> (<span class="subst">$&#123;duration&#125;</span>ms)`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> originalRequest = error.<span class="property">config</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 401 에러: 토큰 갱신 처리</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span> &amp;&amp; !originalRequest.<span class="property">_retry</span>) &#123;</span><br><span class="line">      originalRequest.<span class="property">_retry</span> = <span class="literal">true</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> refreshToken = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/auth/refresh&#x27;, &#123;</span></span><br><span class="line">          refreshToken</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> newToken = [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data).accessToken;</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;accessToken&#x27;</span>, newToken);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 원래 요청에 새 토큰 적용 후 재시도</span></span><br><span class="line">        originalRequest.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;newToken&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">axios</span>(originalRequest);</span><br><span class="line">        </span><br><span class="line">      &#125; <span class="keyword">catch</span> (refreshError) &#123;</span><br><span class="line">        <span class="comment">// 토큰 갱신 실패 시 로그인 페이지로 리다이렉트</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 에러 로깅</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;❌ API 에러:&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">url</span>: error.<span class="property">config</span>?.<span class="property">url</span>,</span><br><span class="line">      <span class="attr">status</span>: error.<span class="property">response</span>?.<span class="property">status</span>,</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="실전-예제-API-클래스-구현"><a href="#실전-예제-API-클래스-구현" class="headerlink" title="실전 예제: API 클래스 구현"></a>실전 예제: API 클래스 구현</h2><h3 id="🏢-사용자-관리-API-클래스"><a href="#🏢-사용자-관리-API-클래스" class="headerlink" title="🏢 사용자 관리 API 클래스"></a>🏢 사용자 관리 API 클래스</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">REACT_APP_API_URL</span> || <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupInterceptors</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setupInterceptors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 요청 인터셉터: 인증 토큰 자동 추가</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="title function_">getAuthToken</span>();</span><br><span class="line">      <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 응답 인터셉터: 에러 처리</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function"><span class="params">response</span> =&gt;</span> response,</span><br><span class="line">      <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleError</span>(error)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getAuthToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;authToken&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = error.<span class="property">response</span>?.<span class="property">data</span>?.<span class="property">message</span> || error.<span class="property">message</span>;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`API 요청 실패: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 목록 조회</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUsers</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; page = <span class="number">1</span>, limit = <span class="number">10</span>, search = <span class="string">&#x27;&#x27;</span> &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; page, limit, search &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">users</span>: [response.<span class="property">data</span>.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data.data),</span></span><br><span class="line">      <span class="attr">totalCount</span>: [response.<span class="property">data</span>.<span class="property">total</span>](<span class="attr">http</span>:<span class="comment">//response.data.total),</span></span><br><span class="line">      <span class="attr">currentPage</span>: page</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 상세 조회</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUserById</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">`/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 생성</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">createUser</span>(<span class="params">userData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> [<span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//this.client.post)(&#x27;/users&#x27;, userData);</span></span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 정보 수정</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">updateUser</span>(<span class="params">userId, userData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">put</span>(<span class="string">`/users/<span class="subst">$&#123;userId&#125;</span>`</span>, userData);</span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 삭제</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">deleteUser</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">delete</span>(<span class="string">`/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, userId &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 검색</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">searchUsers</span>(<span class="params">query</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">&#x27;/users/search&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; <span class="attr">q</span>: query &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 싱글톤 패턴으로 사용</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userService = <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예시</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleUserOperations</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 사용자 목록 조회</span></span><br><span class="line">    <span class="keyword">const</span> userList = <span class="keyword">await</span> userService.<span class="title function_">getUsers</span>(&#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">limit</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">search</span>: <span class="string">&#x27;john&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;사용자 목록:&#x27;</span>, userList);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 새 사용자 생성</span></span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> userService.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;김개발&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;[kim.dev@example.com](mailto:kim.dev@example.com)&#x27;</span>,</span><br><span class="line">      <span class="attr">role</span>: <span class="string">&#x27;developer&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;생성된 사용자:&#x27;</span>, newUser);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 사용자 정보 수정</span></span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> userService.<span class="title function_">updateUser</span>([newUser.<span class="property">id</span>](<span class="attr">http</span>:<span class="comment">//newUser.id), &#123;</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;김시니어&#x27;</span>,</span><br><span class="line">      <span class="attr">role</span>: <span class="string">&#x27;senior-developer&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;수정된 사용자:&#x27;</span>, updatedUser);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;사용자 작업 중 오류:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="파일-업로드-및-다운로드"><a href="#파일-업로드-및-다운로드" class="headerlink" title="파일 업로드 및 다운로드"></a>파일 업로드 및 다운로드</h2><h3 id="📁-파일-업로드"><a href="#📁-파일-업로드" class="headerlink" title="📁 파일 업로드"></a>📁 파일 업로드</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 단일 파일 업로드</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params">file, onProgress</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;documents&#x27;</span>);</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;description&#x27;</span>, [file.<span class="property">name</span>](<span class="attr">http</span>:<span class="comment">//file.name));</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/api/upload&#x27;, formData, &#123;</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onUploadProgress</span>: <span class="function">(<span class="params">progressEvent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> percentCompleted = <span class="title class_">Math</span>.<span class="title function_">round</span>(</span><br><span class="line">          (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / [progressEvent.<span class="property">total</span>](<span class="attr">http</span>:<span class="comment">//progressEvent.total)</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`업로드 진행률: <span class="subst">$&#123;percentCompleted&#125;</span>%`</span>);</span><br><span class="line">        onProgress?.(percentCompleted);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;파일 업로드 실패:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 다중 파일 업로드</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadMultipleFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  </span><br><span class="line">  files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, index</span>) =&gt;</span> &#123;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">`files`</span>, file);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/api/upload/multiple&#x27;, formData, &#123;</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예시</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span><br><span class="line">fileInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = [event.<span class="property">target</span>](<span class="attr">http</span>:<span class="comment">//event.target).files[0];</span></span><br><span class="line">  <span class="keyword">if</span> (file) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">uploadFile</span>(file, <span class="function">(<span class="params">progress</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`업로드 진행률: <span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;업로드 완료:&#x27;</span>, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;업로드 에러:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="📥-파일-다운로드"><a href="#📥-파일-다운로드" class="headerlink" title="📥 파일 다운로드"></a>📥 파일 다운로드</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 파일 다운로드</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">downloadFile</span>(<span class="params">fileId, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`/api/files/<span class="subst">$&#123;fileId&#125;</span>/download`</span>, &#123;</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Blob을 사용하여 파일 다운로드 트리거</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([[response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data)]));</span></span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.<span class="property">href</span> = url;</span><br><span class="line">    link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, filename);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">    [link.<span class="property">click</span>](<span class="attr">http</span>:<span class="comment">//link.click)();</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 메모리 정리</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;파일 다운로드 실패:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="에러-처리-베스트-프랙티스"><a href="#에러-처리-베스트-프랙티스" class="headerlink" title="에러 처리 베스트 프랙티스"></a>에러 처리 베스트 프랙티스</h2><h3 id="🛡️-포괄적인-에러-처리"><a href="#🛡️-포괄적인-에러-처리" class="headerlink" title="🛡️ 포괄적인 에러 처리"></a>🛡️ 포괄적인 에러 처리</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 에러 타입별 처리 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleApiError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 서버가 응답했지만 상태 코드가 2xx 범위를 벗어남</span></span><br><span class="line">    <span class="keyword">const</span> &#123; status, data &#125; = error.<span class="property">response</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;잘못된 요청:&#x27;</span>, data.<span class="property">message</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;인증 실패 - 로그인이 필요합니다&#x27;</span>);</span><br><span class="line">        <span class="comment">// 로그인 페이지로 리다이렉트</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;접근 권한이 없습니다&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;요청한 리소스를 찾을 수 없습니다&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">429</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;서버 내부 오류가 발생했습니다&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`서버 오류 (<span class="subst">$&#123;status&#125;</span>):`</span>, data.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;response&#x27;</span>, status, <span class="attr">message</span>: data.<span class="property">message</span> &#125;;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">    <span class="comment">// 요청은 전송되었지만 응답을 받지 못함 (네트워크 오류)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;네트워크 오류: 서버에 연결할 수 없습니다&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;network&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;네트워크 연결을 확인해주세요&#x27;</span> &#125;;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 요청 설정 중에 오류 발생</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;요청 설정 오류:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;config&#x27;</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 재시도 로직이 포함된 API 호출</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">apiCallWithRetry</span>(<span class="params">requestFn, maxRetries = <span class="number">3</span>, delay = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> attempt = <span class="number">1</span>; attempt &lt;= maxRetries; attempt++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">requestFn</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorInfo = <span class="title function_">handleApiError</span>(error);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (attempt === maxRetries || errorInfo.<span class="property">type</span> === <span class="string">&#x27;response&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> error; <span class="comment">// 최대 재시도 횟수 도달 또는 서버 응답 오류</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`재시도 <span class="subst">$&#123;attempt&#125;</span>/<span class="subst">$&#123;maxRetries&#125;</span> - <span class="subst">$&#123;delay&#125;</span>ms 후 다시 시도...`</span>);</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay * attempt));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예시</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">apiCallWithRetry</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> axios.<span class="title function_">get</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>),</span><br><span class="line">    <span class="number">3</span>, <span class="comment">// 최대 3번 재시도</span></span><br><span class="line">    <span class="number">1000</span> <span class="comment">// 1초 간격</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="성능-최적화-팁"><a href="#성능-최적화-팁" class="headerlink" title="성능 최적화 팁"></a>성능 최적화 팁</h2><h3 id="⚡-요청-최적화-기법"><a href="#⚡-요청-최적화-기법" class="headerlink" title="⚡ 요청 최적화 기법"></a>⚡ 요청 최적화 기법</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 요청 취소 (AbortController 사용)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApiService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetchData</span>(<span class="params">endpoint, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 이전 요청이 있다면 취소</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">has</span>(endpoint)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">get</span>(endpoint).<span class="title function_">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">set</span>(endpoint, controller);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(endpoint, &#123;</span><br><span class="line">        ...options,</span><br><span class="line">        <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">delete</span>(endpoint);</span><br><span class="line">      <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">delete</span>(endpoint);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;요청이 취소되었습니다:&#x27;</span>, endpoint);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 모든 대기중인 요청 취소</span></span><br><span class="line">  <span class="title function_">cancelAllRequests</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">controller</span> =&gt;</span> controller.<span class="title function_">abort</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 요청 디바운싱 (검색 등에 유용)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">executedFunction</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">later</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      <span class="title function_">func</span>(...args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 검색 API 호출 최적화</span></span><br><span class="line"><span class="keyword">const</span> debouncedSearch = <span class="title function_">debounce</span>(<span class="keyword">async</span> (query) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (query.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/search&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; <span class="attr">q</span>: query &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;검색 결과:&#x27;</span>, [results.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//results.data));</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 동시 요청 제한</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RateLimitedApi</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">maxConcurrent = <span class="number">5</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> = maxConcurrent;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(&#123; config, resolve, reject &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">processQueue</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">running</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> || <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span>++;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">axios</span>(config);</span><br><span class="line">      <span class="title function_">resolve</span>(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">running</span>--;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">processQueue</span>(); <span class="comment">// 다음 요청 처리</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rateLimitedApi = <span class="keyword">new</span> <span class="title class_">RateLimitedApi</span>(<span class="number">3</span>); <span class="comment">// 최대 3개 동시 요청</span></span><br></pre></td></tr></table></figure><hr><h2 id="🎯-마무리"><a href="#🎯-마무리" class="headerlink" title="🎯 마무리"></a>🎯 마무리</h2><p>Axios는 JavaScript 생태계에서 가장 강력하고 유연한 HTTP 클라이언트 라이브러리입니다. 이 가이드에서 다룬 내용들을 실제 프로젝트에 적용하면 더욱 안정적이고 효율적인 API 통신을 구현할 수 있습니다.</p><h3 id="핵심-포인트-정리"><a href="#핵심-포인트-정리" class="headerlink" title="핵심 포인트 정리"></a>핵심 포인트 정리</h3><p>✅ <strong>인스턴스 활용</strong>: 공통 설정을 가진 인스턴스로 코드 중복 제거<br>✅ <strong>인터셉터 사용</strong>: 인증, 로깅, 에러처리 등 공통 로직 처리<br>✅ <strong>에러 처리</strong>: 다양한 에러 상황에 대한 체계적인 대응<br>✅ <strong>성능 최적화</strong>: 요청 취소, 디바운싱, 동시 요청 제한<br>✅ <strong>타입 안정성</strong>: TypeScript와 함께 사용하여 더욱 안전한 코드 작성</p><p>Axios를 마스터하여 더 나은 웹 애플리케이션을 만들어보세요! 🚀</p><hr>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/Network/">Network</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/12/javascript/axios-interceptor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Javascript] Axios 사용하기 (고급편)</title>
      <link>https://ckck803.github.io/2025/08/11/javascript/axios2/</link>
      <guid>https://ckck803.github.io/2025/08/11/javascript/axios2/</guid>
      <pubDate>Sun, 10 Aug 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;고급-설정-및-인스턴스&quot;&gt;&lt;a href=&quot;#고급-설정-및-인스턴스&quot; class=&quot;headerlink&quot; title=&quot;고급 설정 및 인스턴스&quot;&gt;&lt;/a&gt;고급 설정 및 인스턴스&lt;/h2&gt;&lt;h3 id=&quot;⚙️-상세한-요청-설정&quot;&gt;&lt;a href=&quot;#⚙️-상세한-요청-설정&quot; class=&quot;headerlink&quot; title=&quot;⚙️ 상세한 요청 설정&quot;&gt;&lt;/a&gt;⚙️ 상세한 요청 설정&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; requestConfig = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;get&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;/api/users&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;baseURL&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://api.example.com&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 헤더 설정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;Authorization&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;Bearer token123&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;Accept&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// URL 파라미터&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;params&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;page&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 타임아웃 (밀리초)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 응답 타입&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;responseType&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// &amp;#x27;json&amp;#x27;, &amp;#x27;text&amp;#x27;, &amp;#x27;blob&amp;#x27;, &amp;#x27;stream&amp;#x27; 등&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 요청 바디 (POST, PUT, PATCH)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;data&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;홍길동&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;[hong@example.com](mailto:hong@example.com)&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;axios&lt;/span&gt;(requestConfig);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;🏗️-Axios-인스턴스-생성&quot;&gt;&lt;a href=&quot;#🏗️-Axios-인스턴스-생성&quot; class=&quot;headerlink&quot; title=&quot;🏗️ Axios 인스턴스 생성&quot;&gt;&lt;/a&gt;🏗️ Axios 인스턴스 생성&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// API별 인스턴스 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; apiClient = axios.&lt;span class=&quot;title function_&quot;&gt;create&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;baseURL&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://api.myservice.com/v1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;application/json&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 인증이 필요한 API용 인스턴스&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; authApiClient = axios.&lt;span class=&quot;title function_&quot;&gt;create&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;baseURL&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://api.myservice.com/v1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;Authorization&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;`Bearer &lt;span class=&quot;subst&quot;&gt;$&amp;#123;getAuthToken()&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 인스턴스 사용&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; users = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; apiClient.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/users&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; profile = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; authApiClient.&lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/profile&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/javascript/axios.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;인터셉터로-요청-응답-제어하기&quot;&gt;&lt;a href=&quot;#인터셉터로-요청-응답-제어하기&quot; class=&quot;headerlink&quot; title=&quot;인터셉터로 요청&amp;#x2F;응답 제어하기&quot;&gt;&lt;/a&gt;인터셉터로 요청&amp;#x2F;응답 제어하기&lt;/h2&gt;&lt;p&gt;웹 개발을 하다 보면 서버와 통신할 때 반복적으로 처리해야 하는 공통 로직들이 생깁니다.&lt;br&gt;예를 들어 JWT 토큰을 모든 요청 헤더에 붙인다거나, 에러 응답을 일관되게 처리한다거나, 응답 데이터 구조를 통일한다거나 하는 일들이죠.&lt;/p&gt;
&lt;p&gt;이때 유용하게 사용할 수 있는 기능이 바로 Axios Interceptor입니다.&lt;/p&gt;
&lt;h3 id=&quot;📤-요청-인터셉터&quot;&gt;&lt;a href=&quot;#📤-요청-인터셉터&quot; class=&quot;headerlink&quot; title=&quot;📤 요청 인터셉터&quot;&gt;&lt;/a&gt;📤 요청 인터셉터&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="고급-설정-및-인스턴스"><a href="#고급-설정-및-인스턴스" class="headerlink" title="고급 설정 및 인스턴스"></a>고급 설정 및 인스턴스</h2><h3 id="⚙️-상세한-요청-설정"><a href="#⚙️-상세한-요청-설정" class="headerlink" title="⚙️ 상세한 요청 설정"></a>⚙️ 상세한 요청 설정</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> requestConfig = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/api/users&#x27;</span>,</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 헤더 설정</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer token123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// URL 파라미터</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 타임아웃 (밀리초)</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 응답 타입</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// &#x27;json&#x27;, &#x27;text&#x27;, &#x27;blob&#x27;, &#x27;stream&#x27; 등</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 요청 바디 (POST, PUT, PATCH)</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;홍길동&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;[hong@example.com](mailto:hong@example.com)&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">axios</span>(requestConfig);</span><br></pre></td></tr></table></figure><h3 id="🏗️-Axios-인스턴스-생성"><a href="#🏗️-Axios-인스턴스-생성" class="headerlink" title="🏗️ Axios 인스턴스 생성"></a>🏗️ Axios 인스턴스 생성</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API별 인스턴스 생성</span></span><br><span class="line"><span class="keyword">const</span> apiClient = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.myservice.com/v1&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">15000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인증이 필요한 API용 인스턴스</span></span><br><span class="line"><span class="keyword">const</span> authApiClient = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.myservice.com/v1&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;getAuthToken()&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인스턴스 사용</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">await</span> apiClient.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> profile = <span class="keyword">await</span> authApiClient.<span class="title function_">get</span>(<span class="string">&#x27;/profile&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/javascript/axios.png"></p><h2 id="인터셉터로-요청-응답-제어하기"><a href="#인터셉터로-요청-응답-제어하기" class="headerlink" title="인터셉터로 요청&#x2F;응답 제어하기"></a>인터셉터로 요청&#x2F;응답 제어하기</h2><p>웹 개발을 하다 보면 서버와 통신할 때 반복적으로 처리해야 하는 공통 로직들이 생깁니다.<br>예를 들어 JWT 토큰을 모든 요청 헤더에 붙인다거나, 에러 응답을 일관되게 처리한다거나, 응답 데이터 구조를 통일한다거나 하는 일들이죠.</p><p>이때 유용하게 사용할 수 있는 기능이 바로 Axios Interceptor입니다.</p><h3 id="📤-요청-인터셉터"><a href="#📤-요청-인터셉터" class="headerlink" title="📤 요청 인터셉터"></a>📤 요청 인터셉터</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 모든 요청에 공통 로직 적용</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 요청 시작 로그</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 API 요청: <span class="subst">$&#123;config.method?.toUpperCase()&#125;</span> <span class="subst">$&#123;config.url&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 인증 토큰 자동 추가</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 요청 시간 기록 (성능 측정용)</span></span><br><span class="line">    config.<span class="property">metadata</span> = &#123; <span class="attr">startTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;❌ 요청 설정 오류:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="📥-응답-인터셉터"><a href="#📥-응답-인터셉터" class="headerlink" title="📥 응답 인터셉터"></a>📥 응답 인터셉터</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 모든 응답에 공통 로직 적용</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 응답 시간 계산</span></span><br><span class="line">    <span class="keyword">const</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> duration = endTime - response.<span class="property">config</span>.<span class="property">metadata</span>.<span class="property">startTime</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`✅ API 응답: <span class="subst">$&#123;response.config.url&#125;</span> (<span class="subst">$&#123;duration&#125;</span>ms)`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> originalRequest = error.<span class="property">config</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 401 에러: 토큰 갱신 처리</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span> &amp;&amp; !originalRequest.<span class="property">_retry</span>) &#123;</span><br><span class="line">      originalRequest.<span class="property">_retry</span> = <span class="literal">true</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> refreshToken = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;refreshToken&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/auth/refresh&#x27;, &#123;</span></span><br><span class="line">          refreshToken</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> newToken = [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data).accessToken;</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;accessToken&#x27;</span>, newToken);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 원래 요청에 새 토큰 적용 후 재시도</span></span><br><span class="line">        originalRequest.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;newToken&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">axios</span>(originalRequest);</span><br><span class="line">        </span><br><span class="line">      &#125; <span class="keyword">catch</span> (refreshError) &#123;</span><br><span class="line">        <span class="comment">// 토큰 갱신 실패 시 로그인 페이지로 리다이렉트</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 에러 로깅</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;❌ API 에러:&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">url</span>: error.<span class="property">config</span>?.<span class="property">url</span>,</span><br><span class="line">      <span class="attr">status</span>: error.<span class="property">response</span>?.<span class="property">status</span>,</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="실전-예제-API-클래스-구현"><a href="#실전-예제-API-클래스-구현" class="headerlink" title="실전 예제: API 클래스 구현"></a>실전 예제: API 클래스 구현</h2><h3 id="🏢-사용자-관리-API-클래스"><a href="#🏢-사용자-관리-API-클래스" class="headerlink" title="🏢 사용자 관리 API 클래스"></a>🏢 사용자 관리 API 클래스</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">REACT_APP_API_URL</span> || <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupInterceptors</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setupInterceptors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 요청 인터셉터: 인증 토큰 자동 추가</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="title function_">getAuthToken</span>();</span><br><span class="line">      <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 응답 인터셉터: 에러 처리</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function"><span class="params">response</span> =&gt;</span> response,</span><br><span class="line">      <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleError</span>(error)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getAuthToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;authToken&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = error.<span class="property">response</span>?.<span class="property">data</span>?.<span class="property">message</span> || error.<span class="property">message</span>;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`API 요청 실패: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 목록 조회</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUsers</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; page = <span class="number">1</span>, limit = <span class="number">10</span>, search = <span class="string">&#x27;&#x27;</span> &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; page, limit, search &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">users</span>: [response.<span class="property">data</span>.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data.data),</span></span><br><span class="line">      <span class="attr">totalCount</span>: [response.<span class="property">data</span>.<span class="property">total</span>](<span class="attr">http</span>:<span class="comment">//response.data.total),</span></span><br><span class="line">      <span class="attr">currentPage</span>: page</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 상세 조회</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUserById</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">`/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 생성</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">createUser</span>(<span class="params">userData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> [<span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//this.client.post)(&#x27;/users&#x27;, userData);</span></span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 정보 수정</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">updateUser</span>(<span class="params">userId, userData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">put</span>(<span class="string">`/users/<span class="subst">$&#123;userId&#125;</span>`</span>, userData);</span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 삭제</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">deleteUser</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">delete</span>(<span class="string">`/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, userId &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 사용자 검색</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">searchUsers</span>(<span class="params">query</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="title function_">get</span>(<span class="string">&#x27;/users/search&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; <span class="attr">q</span>: query &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 싱글톤 패턴으로 사용</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userService = <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예시</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleUserOperations</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 사용자 목록 조회</span></span><br><span class="line">    <span class="keyword">const</span> userList = <span class="keyword">await</span> userService.<span class="title function_">getUsers</span>(&#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">limit</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">search</span>: <span class="string">&#x27;john&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;사용자 목록:&#x27;</span>, userList);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 새 사용자 생성</span></span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> userService.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;김개발&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;[kim.dev@example.com](mailto:kim.dev@example.com)&#x27;</span>,</span><br><span class="line">      <span class="attr">role</span>: <span class="string">&#x27;developer&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;생성된 사용자:&#x27;</span>, newUser);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 사용자 정보 수정</span></span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> userService.<span class="title function_">updateUser</span>([newUser.<span class="property">id</span>](<span class="attr">http</span>:<span class="comment">//newUser.id), &#123;</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;김시니어&#x27;</span>,</span><br><span class="line">      <span class="attr">role</span>: <span class="string">&#x27;senior-developer&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;수정된 사용자:&#x27;</span>, updatedUser);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;사용자 작업 중 오류:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="성능-최적화-팁"><a href="#성능-최적화-팁" class="headerlink" title="성능 최적화 팁"></a>성능 최적화 팁</h2><h3 id="⚡-요청-최적화-기법"><a href="#⚡-요청-최적화-기법" class="headerlink" title="⚡ 요청 최적화 기법"></a>⚡ 요청 최적화 기법</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 요청 취소 (AbortController 사용)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApiService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetchData</span>(<span class="params">endpoint, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 이전 요청이 있다면 취소</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">has</span>(endpoint)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">get</span>(endpoint).<span class="title function_">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">set</span>(endpoint, controller);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(endpoint, &#123;</span><br><span class="line">        ...options,</span><br><span class="line">        <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">delete</span>(endpoint);</span><br><span class="line">      <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">delete</span>(endpoint);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;요청이 취소되었습니다:&#x27;</span>, endpoint);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 모든 대기중인 요청 취소</span></span><br><span class="line">  <span class="title function_">cancelAllRequests</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">controller</span> =&gt;</span> controller.<span class="title function_">abort</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pendingRequests</span>.<span class="title function_">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 요청 디바운싱 (검색 등에 유용)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">executedFunction</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">later</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      <span class="title function_">func</span>(...args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 검색 API 호출 최적화</span></span><br><span class="line"><span class="keyword">const</span> debouncedSearch = <span class="title function_">debounce</span>(<span class="keyword">async</span> (query) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (query.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/search&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123; <span class="attr">q</span>: query &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;검색 결과:&#x27;</span>, [results.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//results.data));</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 동시 요청 제한</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RateLimitedApi</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">maxConcurrent = <span class="number">5</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> = maxConcurrent;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(&#123; config, resolve, reject &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">processQueue</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">running</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> || <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span>++;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">axios</span>(config);</span><br><span class="line">      <span class="title function_">resolve</span>(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">running</span>--;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">processQueue</span>(); <span class="comment">// 다음 요청 처리</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rateLimitedApi = <span class="keyword">new</span> <span class="title class_">RateLimitedApi</span>(<span class="number">3</span>); <span class="comment">// 최대 3개 동시 요청</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/Network/">Network</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/11/javascript/axios2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Javascript] Axios 사용하기</title>
      <link>https://ckck803.github.io/2025/08/10/javascript/axios/</link>
      <guid>https://ckck803.github.io/2025/08/10/javascript/axios/</guid>
      <pubDate>Sat, 09 Aug 2025 23:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/javascript/axios.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;웹 개발에서 API 통신은 필수불가결한 요소입니다. 그 중에서도 Axios는 가장 인기 있고 강력한 JavaScript HTTP 클라이언트 라이브러리로 자리잡고 있습니다. 이 글에서는 Axios의 기본 사용법부터 고급 기능까지 실무에서 바로 활용할 수 있는 예제와 함께 상세히 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;Axios란-무엇인가&quot;&gt;&lt;a href=&quot;#Axios란-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;Axios란 무엇인가?&quot;&gt;&lt;/a&gt;Axios란 무엇인가?&lt;/h2&gt;&lt;p&gt;Axios는 &lt;strong&gt;Promise 기반의 HTTP 클라이언트 라이브러리&lt;/strong&gt;로, 브라우저와 Node.js 환경에서 모두 사용할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;✨-주요-특징&quot;&gt;&lt;a href=&quot;#✨-주요-특징&quot; class=&quot;headerlink&quot; title=&quot;✨ 주요 특징&quot;&gt;&lt;/a&gt;✨ 주요 특징&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Promise 기반&lt;/strong&gt;: async&amp;#x2F;await와 완벽 호환&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청&amp;#x2F;응답 인터셉터&lt;/strong&gt;: 공통 로직 처리 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;자동 JSON 변환&lt;/strong&gt;: 별도 변환 과정 불필요&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청&amp;#x2F;응답 변환&lt;/strong&gt;: 데이터를 원하는 형태로 가공&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청 취소&lt;/strong&gt;: 불필요한 요청 중단 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;광범위한 브라우저 지원&lt;/strong&gt;: IE11까지 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;설치-및-기본-설정&quot;&gt;&lt;a href=&quot;#설치-및-기본-설정&quot; class=&quot;headerlink&quot; title=&quot;설치 및 기본 설정&quot;&gt;&lt;/a&gt;설치 및 기본 설정&lt;/h2&gt;&lt;h3 id=&quot;📦-설치&quot;&gt;&lt;a href=&quot;#📦-설치&quot; class=&quot;headerlink&quot; title=&quot;📦 설치&quot;&gt;&lt;/a&gt;📦 설치&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# npm 사용시&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install axios&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# yarn 사용시  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add axios&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# pnpm 사용시&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pnpm add axios&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/javascript/axios.png"></p><p>웹 개발에서 API 통신은 필수불가결한 요소입니다. 그 중에서도 Axios는 가장 인기 있고 강력한 JavaScript HTTP 클라이언트 라이브러리로 자리잡고 있습니다. 이 글에서는 Axios의 기본 사용법부터 고급 기능까지 실무에서 바로 활용할 수 있는 예제와 함께 상세히 알아보겠습니다.</p><h2 id="Axios란-무엇인가"><a href="#Axios란-무엇인가" class="headerlink" title="Axios란 무엇인가?"></a>Axios란 무엇인가?</h2><p>Axios는 <strong>Promise 기반의 HTTP 클라이언트 라이브러리</strong>로, 브라우저와 Node.js 환경에서 모두 사용할 수 있습니다.</p><h3 id="✨-주요-특징"><a href="#✨-주요-특징" class="headerlink" title="✨ 주요 특징"></a>✨ 주요 특징</h3><ul><li><strong>Promise 기반</strong>: async&#x2F;await와 완벽 호환</li><li><strong>요청&#x2F;응답 인터셉터</strong>: 공통 로직 처리 가능</li><li><strong>자동 JSON 변환</strong>: 별도 변환 과정 불필요</li><li><strong>요청&#x2F;응답 변환</strong>: 데이터를 원하는 형태로 가공</li><li><strong>요청 취소</strong>: 불필요한 요청 중단 가능</li><li><strong>광범위한 브라우저 지원</strong>: IE11까지 지원</li></ul><hr><h2 id="설치-및-기본-설정"><a href="#설치-및-기본-설정" class="headerlink" title="설치 및 기본 설정"></a>설치 및 기본 설정</h2><h3 id="📦-설치"><a href="#📦-설치" class="headerlink" title="📦 설치"></a>📦 설치</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># npm 사용시</span><br><span class="line">npm install axios</span><br><span class="line"></span><br><span class="line"># yarn 사용시  </span><br><span class="line">yarn add axios</span><br><span class="line"></span><br><span class="line"># pnpm 사용시</span><br><span class="line">pnpm add axios</span><br></pre></td></tr></table></figure><h3 id="🔧-기본-import"><a href="#🔧-기본-import" class="headerlink" title="🔧 기본 import"></a>🔧 기본 import</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 모듈</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CommonJS</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CDN (브라우저에서 직접 사용)</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="기본-HTTP-메서드-사용법"><a href="#기본-HTTP-메서드-사용법" class="headerlink" title="기본 HTTP 메서드 사용법"></a>기본 HTTP 메서드 사용법</h2><h3 id="🔍-GET-요청-데이터-조회"><a href="#🔍-GET-요청-데이터-조회" class="headerlink" title="🔍 GET 요청 - 데이터 조회"></a>🔍 GET 요청 - 데이터 조회</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 기본 GET 요청</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;데이터:&#x27;</span>, [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data));</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;상태코드:&#x27;</span>, response.<span class="property">status</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;에러 발생:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// async/await 패턴 (권장)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;게시글 데이터:&#x27;</span>, [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data));</span></span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;게시글 조회 실패:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 쿼리 파라미터 포함</span></span><br><span class="line"><span class="keyword">const</span> posts = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/posts&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">category</span>: <span class="string">&#x27;tech&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="➕-POST-요청-데이터-생성"><a href="#➕-POST-요청-데이터-생성" class="headerlink" title="➕ POST 요청 - 데이터 생성"></a>➕ POST 요청 - 데이터 생성</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 새로운 게시글 생성</span></span><br><span class="line"><span class="keyword">const</span> newPost = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Axios로 HTTP 요청하기&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;Axios 사용법에 대한 상세한 가이드입니다.&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;Developer&#x27;</span>,</span><br><span class="line">  <span class="attr">tags</span>: [<span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;axios&#x27;</span>, <span class="string">&#x27;http&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createPost</span>(<span class="params">postData</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> [axios.<span class="property">post</span>](<span class="attr">http</span>:<span class="comment">//axios.post)(&#x27;/api/posts&#x27;, postData, &#123;</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer your-token-here&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;게시글 생성 성공:&#x27;</span>, [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data));</span></span><br><span class="line">    <span class="keyword">return</span> [response.<span class="property">data</span>](<span class="attr">http</span>:<span class="comment">//response.data);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;게시글 생성 실패:&#x27;</span>, error.<span class="property">response</span>?.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔄-PUT-PATCH-요청-데이터-수정"><a href="#🔄-PUT-PATCH-요청-데이터-수정" class="headerlink" title="🔄 PUT &amp; PATCH 요청 - 데이터 수정"></a>🔄 PUT &amp; PATCH 요청 - 데이터 수정</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PUT: 전체 데이터 교체</span></span><br><span class="line"><span class="keyword">const</span> updatedPost = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;수정된 제목&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;수정된 내용&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;Updated Author&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> axios.<span class="title function_">put</span>(<span class="string">&#x27;/api/posts/1&#x27;</span>, updatedPost);</span><br><span class="line"></span><br><span class="line"><span class="comment">// PATCH: 일부 데이터만 수정</span></span><br><span class="line"><span class="keyword">const</span> partialUpdate = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;새로운 제목만 변경&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> axios.<span class="title function_">patch</span>(<span class="string">&#x27;/api/posts/1&#x27;</span>, partialUpdate);</span><br></pre></td></tr></table></figure><h3 id="🗑️-DELETE-요청-데이터-삭제"><a href="#🗑️-DELETE-요청-데이터-삭제" class="headerlink" title="🗑️ DELETE 요청 - 데이터 삭제"></a>🗑️ DELETE 요청 - 데이터 삭제</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deletePost</span>(<span class="params">postId</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">delete</span>(<span class="string">`/api/posts/<span class="subst">$&#123;postId&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`게시글 <span class="subst">$&#123;postId&#125;</span> 삭제 완료`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;삭제 실패:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/Network/">Network</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/10/javascript/axios/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>네트워크 트래픽의 3가지 패턴 - Ingress, Egress, East-West Traffic</title>
      <link>https://ckck803.github.io/2025/08/10/computer-science/network/traffic/</link>
      <guid>https://ckck803.github.io/2025/08/10/computer-science/network/traffic/</guid>
      <pubDate>Sat, 09 Aug 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;현대 IT 인프라를 이해하려면 데이터가 어떻게 흐르는지 파악하는 것이 필수입니다. 특히 클라우드 환경과 마이크로서비스 아키텍처가 보편화되고 트래픽의 움직임이 클라우드 서비스의 과금 요소중에 하나가 됨으로써 네트워크 트래픽 패턴을 정확히 이해하는 것은 더욱 중요해졌습니다.&lt;/p&gt;
&lt;p&gt;오늘은 인프라를 운영하면서 알아두면 좋을 3가지 트래픽 패턴에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;📌-1-Ingress-외부에서-내부로-들어오는-트래픽&quot;&gt;&lt;a href=&quot;#📌-1-Ingress-외부에서-내부로-들어오는-트래픽&quot; class=&quot;headerlink&quot; title=&quot;📌 1. Ingress: 외부에서 내부로 들어오는 트래픽&quot;&gt;&lt;/a&gt;📌 1. Ingress: 외부에서 내부로 들어오는 트래픽&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Ingress는 클러스터 외부 → 내부로 들어오는 요청입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ingress Traffic은 외부에서 우리 네트워크나 시스템으로 들어오는 모든 트래픽을 의미합니다. 대표적인 예시는 인터넷 사용자가 웹 애플리케이션에 접속하는 경우입니다.&lt;/p&gt;
&lt;h5 id=&quot;실무-예시&quot;&gt;&lt;a href=&quot;#실무-예시&quot; class=&quot;headerlink&quot; title=&quot;실무 예시&quot;&gt;&lt;/a&gt;실무 예시&lt;/h5&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;🌐 사용자 브라우저 → 웹 서버 (HTTP/HTTPS 요청)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;📱 모바일 앱 → API 게이트웨이 (REST API 호출)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;🔗 외부 시스템 → 내부 서비스 (Webhook, 데이터 동기화)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;📌-2-Egress-내부에서-외부로-나가는-트래픽&quot;&gt;&lt;a href=&quot;#📌-2-Egress-내부에서-외부로-나가는-트래픽&quot; class=&quot;headerlink&quot; title=&quot;📌 2. Egress: 내부에서 외부로 나가는 트래픽&quot;&gt;&lt;/a&gt;📌 2. Egress: 내부에서 외부로 나가는 트래픽&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Egress는 클러스터 내부 → 외부로 나가는 요청&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Egress Traffic은 우리 시스템에서 외부로 나가는 모든 트래픽입니다. 예를 들어 응답 데이터, 외부 API 호출, 백업 데이터 전송등을 할때 발생합니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>현대 IT 인프라를 이해하려면 데이터가 어떻게 흐르는지 파악하는 것이 필수입니다. 특히 클라우드 환경과 마이크로서비스 아키텍처가 보편화되고 트래픽의 움직임이 클라우드 서비스의 과금 요소중에 하나가 됨으로써 네트워크 트래픽 패턴을 정확히 이해하는 것은 더욱 중요해졌습니다.</p><p>오늘은 인프라를 운영하면서 알아두면 좋을 3가지 트래픽 패턴에 대해 알아보겠습니다.</p><h2 id="📌-1-Ingress-외부에서-내부로-들어오는-트래픽"><a href="#📌-1-Ingress-외부에서-내부로-들어오는-트래픽" class="headerlink" title="📌 1. Ingress: 외부에서 내부로 들어오는 트래픽"></a>📌 1. Ingress: 외부에서 내부로 들어오는 트래픽</h2><blockquote><p>Ingress는 클러스터 외부 → 내부로 들어오는 요청입니다. </p></blockquote><p>Ingress Traffic은 외부에서 우리 네트워크나 시스템으로 들어오는 모든 트래픽을 의미합니다. 대표적인 예시는 인터넷 사용자가 웹 애플리케이션에 접속하는 경우입니다.</p><h5 id="실무-예시"><a href="#실무-예시" class="headerlink" title="실무 예시"></a>실무 예시</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">🌐 사용자 브라우저 → 웹 서버 (HTTP/HTTPS 요청)</span><br><span class="line">📱 모바일 앱 → API 게이트웨이 (REST API 호출)</span><br><span class="line">🔗 외부 시스템 → 내부 서비스 (Webhook, 데이터 동기화)</span><br></pre></td></tr></table></figure><h2 id="📌-2-Egress-내부에서-외부로-나가는-트래픽"><a href="#📌-2-Egress-내부에서-외부로-나가는-트래픽" class="headerlink" title="📌 2. Egress: 내부에서 외부로 나가는 트래픽"></a>📌 2. Egress: 내부에서 외부로 나가는 트래픽</h2><blockquote><p>Egress는 클러스터 내부 → 외부로 나가는 요청</p></blockquote><p>Egress Traffic은 우리 시스템에서 외부로 나가는 모든 트래픽입니다. 예를 들어 응답 데이터, 외부 API 호출, 백업 데이터 전송등을 할때 발생합니다.</p><h5 id="실무-예시-1"><a href="#실무-예시-1" class="headerlink" title="실무 예시"></a>실무 예시</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">💾 데이터베이스 → 클라우드 스토리지 (백업)</span><br><span class="line">📧 메일 서버 → 외부 메일 서비스 (이메일 발송)</span><br><span class="line">📊 분석 시스템 → 외부 BI 도구 (데이터 전송)</span><br></pre></td></tr></table></figure><h2 id="📌-3-East-West-내부-↔-내부-통신"><a href="#📌-3-East-West-내부-↔-내부-통신" class="headerlink" title="📌 3. East-West: 내부 ↔ 내부 통신"></a>📌 3. East-West: 내부 ↔ 내부 통신</h2><blockquote><p>같은 네트워크 내부(같은 인프라 or 클러스터) 에서 서버와 서버 간, 또는 서비스 간에 횡적으로 이동하는 트래픽입니다.</p></blockquote><p>East-West Traffic은 같은 네트워크 내부에서 시스템 간에 주고받는 트래픽입니다.</p><h5 id="실무-예시-2"><a href="#실무-예시-2" class="headerlink" title="실무 예시"></a>실무 예시</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">🖥️ 웹 서버 ↔ 애플리케이션 서버</span><br><span class="line">💾 애플리케이션 서버 ↔ 데이터베이스</span><br><span class="line">🔄 마이크로서비스 A ↔ 마이크로서비스 B</span><br><span class="line">📊 로그 수집기 ↔ 분석 서버</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/Network/">Network</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/10/computer-science/network/traffic/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Django] - Model 이란?</title>
      <link>https://ckck803.github.io/2025/08/08/django/django/model-01/</link>
      <guid>https://ckck803.github.io/2025/08/08/django/django/model-01/</guid>
      <pubDate>Thu, 07 Aug 2025 21:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/django/django.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Model이란&quot;&gt;&lt;a href=&quot;#Model이란&quot; class=&quot;headerlink&quot; title=&quot;Model이란?&quot;&gt;&lt;/a&gt;Model이란?&lt;/h2&gt;&lt;p&gt;Django에서 Model은 데이터베이스와 상호작용하기 위한 핵심 개념입니다. 쉽게 말해, 데이터베이스 테이블을 파이썬 클래스 형태로 정의한 것이라고 보면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 모델 클래스 → 하나의 테이블&lt;/li&gt;
&lt;li&gt;클래스의 속성 → 테이블의 컬럼&lt;/li&gt;
&lt;li&gt;인스턴스 → 테이블의 행(Row)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 모델을 정의하면 SQL을 직접 작성하지 않고도 Django의 ORM(Object Relational Mapping)을 통해 데이터베이스를 제어할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;Model-생성&quot;&gt;&lt;a href=&quot;#Model-생성&quot; class=&quot;headerlink&quot; title=&quot;Model 생성&quot;&gt;&lt;/a&gt;Model 생성&lt;/h2&gt;&lt;p&gt;제목, 내용, 작성자, 생성시간, 수정시간을 가진 게시판 데이터를 저장하기 위해서는 다음과 같이 모델을 정의할 수 있습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; models&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Board&lt;/span&gt;(models.Model):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)      &lt;span class=&quot;comment&quot;&gt;# 문자열 컬럼&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content = models.TextField()                  &lt;span class=&quot;comment&quot;&gt;# 긴 텍스트&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author = models.ForeignKey(&lt;span class=&quot;string&quot;&gt;&amp;#x27;auth.User&amp;#x27;&lt;/span&gt;, on_delete=models.CASCADE)  &lt;span class=&quot;comment&quot;&gt;# 외래키&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    created_at = models.DateTimeField(auto_now_add=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 생성 시간&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updated_at = models.DateTimeField(auto_now=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)      &lt;span class=&quot;comment&quot;&gt;# 수정 시간&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Meta&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ordering = [&lt;span class=&quot;string&quot;&gt;&amp;#x27;-created_at&amp;#x27;&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;# 기본 정렬&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.title&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;주요-요소-설명&quot;&gt;&lt;a href=&quot;#주요-요소-설명&quot; class=&quot;headerlink&quot; title=&quot;주요 요소 설명&quot;&gt;&lt;/a&gt;주요 요소 설명&lt;/h2&gt;&lt;h4 id=&quot;필드-Field&quot;&gt;&lt;a href=&quot;#필드-Field&quot; class=&quot;headerlink&quot; title=&quot;필드(Field)&quot;&gt;&lt;/a&gt;필드(Field)&lt;/h4&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/django/django.png"></p><h2 id="Model이란"><a href="#Model이란" class="headerlink" title="Model이란?"></a>Model이란?</h2><p>Django에서 Model은 데이터베이스와 상호작용하기 위한 핵심 개념입니다. 쉽게 말해, 데이터베이스 테이블을 파이썬 클래스 형태로 정의한 것이라고 보면 됩니다.</p><ul><li>하나의 모델 클래스 → 하나의 테이블</li><li>클래스의 속성 → 테이블의 컬럼</li><li>인스턴스 → 테이블의 행(Row)</li></ul><p>즉, 모델을 정의하면 SQL을 직접 작성하지 않고도 Django의 ORM(Object Relational Mapping)을 통해 데이터베이스를 제어할 수 있습니다.</p><h2 id="Model-생성"><a href="#Model-생성" class="headerlink" title="Model 생성"></a>Model 생성</h2><p>제목, 내용, 작성자, 생성시간, 수정시간을 가진 게시판 데이터를 저장하기 위해서는 다음과 같이 모델을 정의할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)      <span class="comment"># 문자열 컬럼</span></span><br><span class="line">    content = models.TextField()                  <span class="comment"># 긴 텍스트</span></span><br><span class="line">    author = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>, on_delete=models.CASCADE)  <span class="comment"># 외래키</span></span><br><span class="line">    created_at = models.DateTimeField(auto_now_add=<span class="literal">True</span>)  <span class="comment"># 생성 시간</span></span><br><span class="line">    updated_at = models.DateTimeField(auto_now=<span class="literal">True</span>)      <span class="comment"># 수정 시간</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;-created_at&#x27;</span>]  <span class="comment"># 기본 정렬</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><h2 id="주요-요소-설명"><a href="#주요-요소-설명" class="headerlink" title="주요 요소 설명"></a>주요 요소 설명</h2><h4 id="필드-Field"><a href="#필드-Field" class="headerlink" title="필드(Field)"></a>필드(Field)</h4><ul><li>CharField → 짧은 문자열 (제한 길이 필요)</li><li>TextField → 긴 텍스트</li><li>IntegerField, FloatField → 숫자</li><li>DateTimeField → 날짜와 시간</li><li>ForeignKey, ManyToManyField, OneToOneField → 관계(Relationship)</li></ul><h4 id="Meta-클래스"><a href="#Meta-클래스" class="headerlink" title="Meta 클래스"></a>Meta 클래스</h4><p>모델에 대한 추가 옵션을 정의할 수 있습니다.</p><ul><li>ordering → 기본 정렬 기준 지정</li><li>db_table → 직접 테이블 이름 설정</li><li>verbose_name → 관리자(admin)에서 보이는 이름 설정</li></ul><h2 id="모델과-데이터베이스-연결"><a href="#모델과-데이터베이스-연결" class="headerlink" title="모델과 데이터베이스 연결"></a>모델과 데이터베이스 연결</h2><p>모델을 정의한 뒤에는 <strong>마이그레이션(migration)</strong> 을 통해 데이터베이스에 반영합니다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations   <span class="comment"># 변경사항 기록</span></span><br><span class="line">python manage.py migrate          <span class="comment"># 실제 DB에 적용</span></span><br></pre></td></tr></table></figure><h2 id="ORM을-활용한-데이터-조작"><a href="#ORM을-활용한-데이터-조작" class="headerlink" title="ORM을 활용한 데이터 조작"></a>ORM을 활용한 데이터 조작</h2><h4 id="생성-Create"><a href="#생성-Create" class="headerlink" title="생성(Create)"></a>생성(Create)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">board = Board.objects.create(</span><br><span class="line">    title=<span class="string">&quot;첫 글&quot;</span>,</span><br><span class="line">    content=<span class="string">&quot;내용입니다&quot;</span>,</span><br><span class="line">    author=user</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="조회-Read"><a href="#조회-Read" class="headerlink" title="조회(Read)"></a>조회(Read)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Board.objects.<span class="built_in">all</span>()                     <span class="comment"># 전체 조회</span></span><br><span class="line">Board.objects.<span class="built_in">filter</span>(author=user)       <span class="comment"># 특정 조건 조회</span></span><br><span class="line">Board.objects.order_by(<span class="string">&#x27;-created_at&#x27;</span>)   <span class="comment"># 정렬 조회</span></span><br></pre></td></tr></table></figure><h4 id="수정-Update"><a href="#수정-Update" class="headerlink" title="수정(Update)"></a>수정(Update)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">board = Board.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">board.title = <span class="string">&quot;제목 수정&quot;</span></span><br><span class="line">board.save()</span><br></pre></td></tr></table></figure><h4 id="삭제-Delete"><a href="#삭제-Delete" class="headerlink" title="삭제(Delete)"></a>삭제(Delete)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">board = Board.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">board.delete()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Develop/">Develop</category>
      
      <category domain="https://ckck803.github.io/categories/Develop/Django/">Django</category>
      
      
      
      <comments>https://ckck803.github.io/2025/08/08/django/django/model-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring Boot] - Spring Interceptor 에서 Response 조작이 가능한가?</title>
      <link>https://ckck803.github.io/2025/04/17/spring/springboot-interceptor-response/</link>
      <guid>https://ckck803.github.io/2025/04/17/spring/springboot-interceptor-response/</guid>
      <pubDate>Wed, 16 Apr 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/springboot/spring-boot-logo.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; title=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/sjk5766/spring-interceptor%EC%97%90%EC%84%9C-response-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0-5b6ea3a5a270&quot;&gt;Spring interceptor에서 Response 수정하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39725888/what-does-httpservletresponse-is-committed-mean&quot;&gt;“HttpServletResponse is committed” mean?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;📝-후처리에서-메뉴-데이터를-Response-객체에-데이터를-넣어주세요&quot;&gt;&lt;a href=&quot;#📝-후처리에서-메뉴-데이터를-Response-객체에-데이터를-넣어주세요&quot; class=&quot;headerlink&quot; title=&quot;📝 후처리에서 메뉴 데이터를 Response 객체에 데이터를 넣어주세요&quot;&gt;&lt;/a&gt;📝 후처리에서 메뉴 데이터를 Response 객체에 데이터를 넣어주세요&lt;/h2&gt;&lt;p&gt;개발 요구사항 중 페이지 접근시 전처리에서 접근 권한을 확인하고 후처리로 Response 객체에 사용자가 접근할 수 있는 메뉴를 같이 내려달라는 요구를 받았습니다. 해당 요구사항을 Spring 에서 제공하는 Interceptor 로 가능한지 검토해 달라는 요청을 받았습니다.&lt;/p&gt;
&lt;h2 id=&quot;🤔-Interceptor-에서-데이터-변경이-가능할까&quot;&gt;&lt;a href=&quot;#🤔-Interceptor-에서-데이터-변경이-가능할까&quot; class=&quot;headerlink&quot; title=&quot;🤔 Interceptor 에서 데이터 변경이 가능할까?&quot;&gt;&lt;/a&gt;🤔 Interceptor 에서 데이터 변경이 가능할까?&lt;/h2&gt;&lt;p&gt;스프링에서 제공하는 Interceptor 는 아래 코드와 같습니다. 요청을 처리하는 Controller 전에 preHandler 를 거치기 때문에 사용자 접근을 제어해달라는 요구사항은 어렵지 않았습니다.&lt;/p&gt;
&lt;p&gt;마찬가지로 요청이 끝난 후에는 postHandler 를 거쳐 나가는데 그때 응답 객체를 수정할 수 있지 않을까? 마침, HttpServletRequest 객체를 매게변수로 받아서 조작이 가능할 것 같은 그런 기분이 들지만, 결론은 안됩니다. (두둥탁 🥁)&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;HandlerInterceptor&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;HandlerInterceptor&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest request, HttpServletResponse response, Object handler)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest request, HttpServletResponse response, Object handler,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt; ModelAndView modelAndView)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;afterCompletion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest request, HttpServletResponse response, Object handler,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt; Exception ex)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;🧐-그럼-왜-인터셉터-에서-응답-객체-조작이-불가능한-것인가&quot;&gt;&lt;a href=&quot;#🧐-그럼-왜-인터셉터-에서-응답-객체-조작이-불가능한-것인가&quot; class=&quot;headerlink&quot; title=&quot;🧐 그럼 왜 인터셉터 에서 응답 객체 조작이 불가능한 것인가?&quot;&gt;&lt;/a&gt;🧐 그럼 왜 인터셉터 에서 응답 객체 조작이 불가능한 것인가?&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/springboot/spring-boot-logo.png"></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://medium.com/sjk5766/spring-interceptor%EC%97%90%EC%84%9C-response-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0-5b6ea3a5a270">Spring interceptor에서 Response 수정하기</a></li><li><a href="https://stackoverflow.com/questions/39725888/what-does-httpservletresponse-is-committed-mean">“HttpServletResponse is committed” mean?</a></li></ul><h2 id="📝-후처리에서-메뉴-데이터를-Response-객체에-데이터를-넣어주세요"><a href="#📝-후처리에서-메뉴-데이터를-Response-객체에-데이터를-넣어주세요" class="headerlink" title="📝 후처리에서 메뉴 데이터를 Response 객체에 데이터를 넣어주세요"></a>📝 후처리에서 메뉴 데이터를 Response 객체에 데이터를 넣어주세요</h2><p>개발 요구사항 중 페이지 접근시 전처리에서 접근 권한을 확인하고 후처리로 Response 객체에 사용자가 접근할 수 있는 메뉴를 같이 내려달라는 요구를 받았습니다. 해당 요구사항을 Spring 에서 제공하는 Interceptor 로 가능한지 검토해 달라는 요청을 받았습니다.</p><h2 id="🤔-Interceptor-에서-데이터-변경이-가능할까"><a href="#🤔-Interceptor-에서-데이터-변경이-가능할까" class="headerlink" title="🤔 Interceptor 에서 데이터 변경이 가능할까?"></a>🤔 Interceptor 에서 데이터 변경이 가능할까?</h2><p>스프링에서 제공하는 Interceptor 는 아래 코드와 같습니다. 요청을 처리하는 Controller 전에 preHandler 를 거치기 때문에 사용자 접근을 제어해달라는 요구사항은 어렵지 않았습니다.</p><p>마찬가지로 요청이 끝난 후에는 postHandler 를 거쳐 나가는데 그때 응답 객체를 수정할 수 있지 않을까? 마침, HttpServletRequest 객체를 매게변수로 받아서 조작이 가능할 것 같은 그런 기분이 들지만, 결론은 안됩니다. (두둥탁 🥁)</p><figure class="highlight java"><figcaption><span>HandlerInterceptor</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🧐-그럼-왜-인터셉터-에서-응답-객체-조작이-불가능한-것인가"><a href="#🧐-그럼-왜-인터셉터-에서-응답-객체-조작이-불가능한-것인가" class="headerlink" title="🧐 그럼 왜 인터셉터 에서 응답 객체 조작이 불가능한 것인가?"></a>🧐 그럼 왜 인터셉터 에서 응답 객체 조작이 불가능한 것인가?</h2><blockquote><p>응답 객체가 Commit 된 후에는 응답 객체 수정이 불가능합니다.</p></blockquote><p>응답 객체를 수정할 수 없는 이유를 이해하기 위해서는 먼저, 응답 객체에 값이 어떻게 쓰여지는지를 이해할 필요가 있습니다.</p><p>@ResponseBody가 붙은 컨트롤러는 <strong>HttpMessageConverter</strong> 를 사용하는데, 이 컨버터는 응답 객체의 <strong>출력 스트림</strong> 을 이용해 데이터를 모두 쓴 후, flush 메서드를 호출합니다. 이때 응답 객체는 <strong>commit</strong> 상태가 되고 클라이언트로 전송합니다.</p><p>응답 객체가 commit 되면 응답 객체에서 제공하는 출력스트림을 close 시켜 해당 스트림을 사용할 수 없게 합니다. 그래서 응답 객체가 commit 된 이후에는 응답 내용을 수정하는 것은 불가능합니다. 결과적으로 commit 된 응답객체를 받는 인터셉터는 데이터 수정이 불가능합니다.</p><h4 id="🔎-Commit-시점-확인하기-AbstractGenericHttpMessageConverter"><a href="#🔎-Commit-시점-확인하기-AbstractGenericHttpMessageConverter" class="headerlink" title="🔎 Commit 시점 확인하기 - AbstractGenericHttpMessageConverter"></a>🔎 Commit 시점 확인하기 - AbstractGenericHttpMessageConverter</h4><p>MappingJackson2HttpMessageConverter 가 상속 하는 AbstractGenericHttpMessageConverter 클래스를 확인해보면 해당 클래스 내 <strong>write</strong> 메소드에서 응답 객체에 데이터를 쓴 후 <code>flush</code> 메소드를 호출합니다. </p><figure class="highlight java"><figcaption><span>AbstractGenericHttpMessageConverter</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="keyword">final</span> T t, <span class="meta">@Nullable</span> <span class="keyword">final</span> Type type, <span class="meta">@Nullable</span> MediaType contentType,</span></span><br><span class="line"><span class="params">        HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> outputMessage.getHeaders();</span><br><span class="line">    addDefaultHeaders(headers, t, contentType);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (outputMessage <span class="keyword">instanceof</span> StreamingHttpOutputMessage streamingOutputMessage) &#123;</span><br><span class="line">        streamingOutputMessage.setBody(<span class="keyword">new</span> <span class="title class_">StreamingHttpOutputMessage</span>.Body() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeTo</span><span class="params">(OutputStream outputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                writeInternal(t, type, <span class="keyword">new</span> <span class="title class_">HttpOutputMessage</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> OutputStream <span class="title function_">getBody</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> outputStream;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> HttpHeaders <span class="title function_">getHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> headers;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatable</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> supportsRepeatableWrites(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        writeInternal(t, type, outputMessage);</span><br><span class="line">        outputMessage.getBody().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔎-인터셉터에서-응답-객체-상태-확인하기"><a href="#🔎-인터셉터에서-응답-객체-상태-확인하기" class="headerlink" title="🔎 인터셉터에서 응답 객체 상태 확인하기"></a>🔎 인터셉터에서 응답 객체 상태 확인하기</h4><blockquote><p>Controller 에 응답값을 return 할 경우 응답 객체는 Commit 됩니다.</p></blockquote><p>응답객체에 값을 넣지 않는 Controller 와 값을 넣는 Controller 를 만들어 응답값 유무에 따른 응답 객체 상태가 어떻게 변화 되는지 확인해봅니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/empty&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity <span class="title function_">empty</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(<span class="literal">null</span>, HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(<span class="string">&quot;Hello World&quot;</span>, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>응답 객체의 Commit 상태에 따른 응답 객체의 값 변경 확인을 위한 인터셉터를 만들어줍니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModifyResponseBodyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Request URI = &quot;</span> + request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;Response is committed = &quot;</span> + response.isCommitted());</span><br><span class="line">        </span><br><span class="line">        response.getOutputStream().write(<span class="string">&quot;값이 바뀔까요?&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래 결과를 보면 Commit 상태가 true 일 경우는 값이 변경되지 않고 false 일 경우는 값 변경이 가능하다는 것을 확인할 수 있었습니다.</p><p>응답 객체에 값을 쓰지 않을 경우는 HttpMessageConverter 를 거치지 않으므로 Response 객체의 Commit 상태가 변경되지 않습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">=============== Server ===============</span><br><span class="line">Request URI = /hello</span><br><span class="line">Response is committed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">=============== Client ===============</span><br><span class="line"><span class="string">&quot;/hello&quot;</span> 응답: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=============== Server ===============</span><br><span class="line">Request URI = /empty</span><br><span class="line">Response is committed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">=============== Client ===============</span><br><span class="line"><span class="string">&quot;/empty&quot;</span> 응답: <span class="string">&quot;값이 바뀔까요?&quot;</span> <span class="comment"># 원래는 응답 값이 없어야 합니다.</span></span><br></pre></td></tr></table></figure><h2 id="❗️-응답-객체에-값을-가져오는-것도-안된다"><a href="#❗️-응답-객체에-값을-가져오는-것도-안된다" class="headerlink" title="❗️ 응답 객체에 값을 가져오는 것도 안된다"></a>❗️ 응답 객체에 값을 가져오는 것도 안된다</h2><p>관련 내용을 정리하다가 알게 된 것은 응답 객체에 값을 넣은 후 Body 에 넣은 값을 가져와 인터셉터에서 출력로그로 찍으려고 했는데, HttpServletResponse 는 출력 스트림만 제공하기 때문에 값을 꺼내올 방법이 없습니다.</p><p>응답 객체 값을 별도로 저장하는 변수를 만들어서 응답 객체에 값을 쓸때 해당 변수에도 값을 같이 써준 후 값을 읽어와야 합니다.</p><p>서블릿에서는 기존 응답 객체를 감싸는 HttpServletResponseWrapper 클래스를 제공합니다. 해당 클래스는 HttpServletResponse 를 구현한 클래스라 기존 응답 객체와 동일한 함수를 사용할 수 있고 기존 응답 객체 기능에 원하는 부가 기능을 추가해 사용할 수 있습니다.</p><h4 id="HttpServletResponseWrapper-응답-래핑-클래스"><a href="#HttpServletResponseWrapper-응답-래핑-클래스" class="headerlink" title="HttpServletResponseWrapper - 응답 래핑 클래스"></a>HttpServletResponseWrapper - 응답 래핑 클래스</h4><p>HttpServletResponseWrapper 클래스를 이용해 래핑 클래스를 만들어 줍니다. 해당 클래스에서는 응답 객체에 값을 쓸때 버퍼에도 값을 써주는 기능을 추가하고, 버퍼에 저장된 값을 읽어오는 새로운 함수를 추가해줍니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedResponseWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletResponseWrapper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ByteArrayOutputStream</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletOutputStream</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span> &#123;</span><br><span class="line">            buffer.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(buffer));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedResponseWrapper</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getResponseData() &#123;</span><br><span class="line">        writer.flush(); <span class="comment">// writer를 flush 해야 실제 내용이 buffer에 반영됨</span></span><br><span class="line">        <span class="keyword">return</span> buffer.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HttpServletResponseWrapper-응답-래핑-클래스-사용"><a href="#HttpServletResponseWrapper-응답-래핑-클래스-사용" class="headerlink" title="HttpServletResponseWrapper - 응답 래핑 클래스 사용"></a>HttpServletResponseWrapper - 응답 래핑 클래스 사용</h4><p>HttpServletResponseWrapper 객체를 사용하기 위해서 filter 에서 응답 객체를 래핑 객체로 대체해 넘겨줍니다. 이후 요청이 처리되고 응답 객체를 사용할때는 래핑 객체를 사용하게 됩니다.</p><p>인터셉터의 preHandler 메소드에 HttpServletResponseWrapper 객체를 넘겨줄 수도 있지만, 제일 앞단에서 요청을 받는 filter 에서 세팅해 넘겨주는 방식이 제일 선호하는 것 같습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseLoggingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        <span class="type">LoggingHttpServletResponseWrapper</span> <span class="variable">responseWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHttpServletResponseWrapper</span>(httpServletResponse);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, responseWrapper); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 복사된 응답 내용 콘솔 출력</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(responseWrapper.getCopy(), StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(<span class="string">&quot;Response Body = &quot;</span> + responseBody);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://ckck803.github.io/categories/Spring/Spring-Framework/">Spring Framework</category>
      
      
      <category domain="https://ckck803.github.io/tags/JPA/">JPA</category>
      
      
      <comments>https://ckck803.github.io/2025/04/17/spring/springboot-interceptor-response/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Spring Boot] - Github Package 에 Spring 프로젝트를 배포하기</title>
      <link>https://ckck803.github.io/2025/04/17/spring/spring-github-package/</link>
      <guid>https://ckck803.github.io/2025/04/17/spring/spring-github-package/</guid>
      <pubDate>Wed, 16 Apr 2025 22:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/springboot/spring-boot-logo.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; title=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/ko/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry&quot;&gt;GitHub Packages - Gradle 레지스트리 작업&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🧑‍💻-무료로-Artifact-저장소를-사용하고-싶다&quot;&gt;&lt;a href=&quot;#🧑‍💻-무료로-Artifact-저장소를-사용하고-싶다&quot; class=&quot;headerlink&quot; title=&quot;🧑‍💻 무료로 Artifact 저장소를 사용하고 싶다!&quot;&gt;&lt;/a&gt;🧑‍💻 무료로 Artifact 저장소를 사용하고 싶다!&lt;/h2&gt;&lt;p&gt;회사가 아닌 개인 프로젝트를 할때, 라이브러리를 개발해서 다른 프로젝트에서 사용하고 싶은 경우, 라이브러리 저장을 위한 Nexus 저장소를 별도로 구축하기가 쉽지 않습니다. 지속적이고 무료로 패키지 저장이 가능한 서비스로 JitPack 과 Github 패키지 저장소를 찾아봤습니다.&lt;/p&gt;
&lt;p&gt;처음에 알아본 JitPack 은 패키지를 무료로 올릴 수 있는 서비스지만, Private 저장소 대상으로는 유료입니다. 만약 내가 Private 저장소를 이용해 패키지를 만든다고 하면 적합한 대상이 아닙니다.&lt;/p&gt;
&lt;p&gt;추가적으로 알아본게 Github 인데, Github 가 코드 저장 뿐만 아니라 Docker 이미지나 Artifact 들을 올릴 수 있는 기능 또한 제공을 하고 있었습니다. 코드와 함께 이번에는 Github 를 패키지 저장소로 사용해보려고 합니다.&lt;/p&gt;
&lt;h2 id=&quot;🌱-Spring-Boot-프로젝트를-Github-에-배포하기&quot;&gt;&lt;a href=&quot;#🌱-Spring-Boot-프로젝트를-Github-에-배포하기&quot; class=&quot;headerlink&quot; title=&quot;🌱 Spring Boot 프로젝트를 Github 에 배포하기&quot;&gt;&lt;/a&gt;🌱 Spring Boot 프로젝트를 Github 에 배포하기&lt;/h2&gt;&lt;h4 id=&quot;✅-Gradle-플러그인-추가-설정-추가&quot;&gt;&lt;a href=&quot;#✅-Gradle-플러그인-추가-설정-추가&quot; class=&quot;headerlink&quot; title=&quot;✅ Gradle 플러그인 추가 설정 추가&quot;&gt;&lt;/a&gt;✅ Gradle 플러그인 추가 설정 추가&lt;/h4&gt;&lt;p&gt;build.gradle 에 &lt;code&gt;maven-publish&lt;/code&gt; 플러그인을 추가합니다&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/springboot/spring-boot-logo.png"></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.github.com/ko/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry">GitHub Packages - Gradle 레지스트리 작업</a></li></ul><h2 id="🧑‍💻-무료로-Artifact-저장소를-사용하고-싶다"><a href="#🧑‍💻-무료로-Artifact-저장소를-사용하고-싶다" class="headerlink" title="🧑‍💻 무료로 Artifact 저장소를 사용하고 싶다!"></a>🧑‍💻 무료로 Artifact 저장소를 사용하고 싶다!</h2><p>회사가 아닌 개인 프로젝트를 할때, 라이브러리를 개발해서 다른 프로젝트에서 사용하고 싶은 경우, 라이브러리 저장을 위한 Nexus 저장소를 별도로 구축하기가 쉽지 않습니다. 지속적이고 무료로 패키지 저장이 가능한 서비스로 JitPack 과 Github 패키지 저장소를 찾아봤습니다.</p><p>처음에 알아본 JitPack 은 패키지를 무료로 올릴 수 있는 서비스지만, Private 저장소 대상으로는 유료입니다. 만약 내가 Private 저장소를 이용해 패키지를 만든다고 하면 적합한 대상이 아닙니다.</p><p>추가적으로 알아본게 Github 인데, Github 가 코드 저장 뿐만 아니라 Docker 이미지나 Artifact 들을 올릴 수 있는 기능 또한 제공을 하고 있었습니다. 코드와 함께 이번에는 Github 를 패키지 저장소로 사용해보려고 합니다.</p><h2 id="🌱-Spring-Boot-프로젝트를-Github-에-배포하기"><a href="#🌱-Spring-Boot-프로젝트를-Github-에-배포하기" class="headerlink" title="🌱 Spring Boot 프로젝트를 Github 에 배포하기"></a>🌱 Spring Boot 프로젝트를 Github 에 배포하기</h2><h4 id="✅-Gradle-플러그인-추가-설정-추가"><a href="#✅-Gradle-플러그인-추가-설정-추가" class="headerlink" title="✅ Gradle 플러그인 추가 설정 추가"></a>✅ Gradle 플러그인 추가 설정 추가</h4><p>build.gradle 에 <code>maven-publish</code> 플러그인을 추가합니다</p><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    ...</span><br><span class="line">    id <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="✅-저장소-정보-추가"><a href="#✅-저장소-정보-추가" class="headerlink" title="✅ 저장소 정보 추가"></a>✅ 저장소 정보 추가</h4><p>build.gradle 에 배포를 위한 저장소 정보들을 기입합니다.</p><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            name = <span class="string">&quot;GitHubPackages&quot;</span></span><br><span class="line">            url = uri(<span class="string">&quot;https://maven.pkg.github.com/ckck803/common&quot;</span>)</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username = findProperty(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                password = findProperty(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    publications &#123;</span><br><span class="line">        gpr(MavenPublication) &#123;</span><br><span class="line">            from(components.java)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="✅-빌드-배포"><a href="#✅-빌드-배포" class="headerlink" title="✅ 빌드 배포"></a>✅ 빌드 배포</h4><p>명령어를 실행하면 설정한 Github Repository 로 패키지 파일이 업로드됩니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./gradlew publish</span><br></pre></td></tr></table></figure><h2 id="📌-Github-에-Gradle-패키지-배포-결과"><a href="#📌-Github-에-Gradle-패키지-배포-결과" class="headerlink" title="📌 Github 에 Gradle 패키지 배포 결과"></a>📌 Github 에 Gradle 패키지 배포 결과</h2><p>Github 에 가서 Package 탭으로 가면 패키지가 올라간 것을 확인할 수 있습니다.</p><p><img src="/images/spring-github-package.png"></p>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Spring/">Spring</category>
      
      <category domain="https://ckck803.github.io/categories/Spring/Spring-Framework/">Spring Framework</category>
      
      
      <category domain="https://ckck803.github.io/tags/JPA/">JPA</category>
      
      
      <comments>https://ckck803.github.io/2025/04/17/spring/spring-github-package/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Docker] 이미지 history</title>
      <link>https://ckck803.github.io/2025/04/13/docker/image/docker-history/</link>
      <guid>https://ckck803.github.io/2025/04/13/docker/image/docker-history/</guid>
      <pubDate>Sat, 12 Apr 2025 21:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/docker/docker.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/13/docker/image/docker-history/&quot; title=&quot;[Docker] 이미지 history&quot;&gt;[Docker] 이미지 history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/08/docker/image/docker-layer/&quot; title=&quot;[Docker] 이미지 레이어&quot;&gt;[Docker] 이미지 레이어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/07/docker/image/docker-build/&quot; title=&quot;[Docker] 이미지 Build&quot;&gt;[Docker] 이미지 Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; title=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/reference/cli/docker/image/history/&quot;&gt;Docker History 명령어 공식문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;📋-이미지-history&quot;&gt;&lt;a href=&quot;#📋-이미지-history&quot; class=&quot;headerlink&quot; title=&quot;📋 이미지 history&quot;&gt;&lt;/a&gt;📋 이미지 history&lt;/h2&gt;&lt;p&gt;Docker 이미지를 받아서 사용하다보면 해당 이미지가 어떻게 생성 됐는지, 어떤 명령어를 사용했는지 확인해봐야 할때가 있습니다. Docker 에서는 history 명령어를 이용해 해당 이미지가 어떤 명령어를 이용해 이미지가 생성 됐는지 확인할 수 있는 기능을 제공합니다.&lt;/p&gt;
&lt;p&gt;저 같은 경우는 제대로 작동되지 않는 빌드된 이미지에 대한 디버깅용으로 사용을 많이 했었습니다.&lt;/p&gt;
&lt;h2 id=&quot;✅-docker-history-명령어&quot;&gt;&lt;a href=&quot;#✅-docker-history-명령어&quot; class=&quot;headerlink&quot; title=&quot;✅ docker history 명령어&quot;&gt;&lt;/a&gt;✅ docker history 명령어&lt;/h2&gt;&lt;h4 id=&quot;기본-명령어&quot;&gt;&lt;a href=&quot;#기본-명령어&quot; class=&quot;headerlink&quot; title=&quot;기본 명령어&quot;&gt;&lt;/a&gt;기본 명령어&lt;/h4&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/docker/docker.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/13/docker/image/docker-history/" title="[Docker] 이미지 history">[Docker] 이미지 history</a></li><li><a href="/2025/04/08/docker/image/docker-layer/" title="[Docker] 이미지 레이어">[Docker] 이미지 레이어</a></li><li><a href="/2025/04/07/docker/image/docker-build/" title="[Docker] 이미지 Build">[Docker] 이미지 Build</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.docker.com/reference/cli/docker/image/history/">Docker History 명령어 공식문서</a></li></ul><h2 id="📋-이미지-history"><a href="#📋-이미지-history" class="headerlink" title="📋 이미지 history"></a>📋 이미지 history</h2><p>Docker 이미지를 받아서 사용하다보면 해당 이미지가 어떻게 생성 됐는지, 어떤 명령어를 사용했는지 확인해봐야 할때가 있습니다. Docker 에서는 history 명령어를 이용해 해당 이미지가 어떤 명령어를 이용해 이미지가 생성 됐는지 확인할 수 있는 기능을 제공합니다.</p><p>저 같은 경우는 제대로 작동되지 않는 빌드된 이미지에 대한 디버깅용으로 사용을 많이 했었습니다.</p><h2 id="✅-docker-history-명령어"><a href="#✅-docker-history-명령어" class="headerlink" title="✅ docker history 명령어"></a>✅ docker history 명령어</h2><h4 id="기본-명령어"><a href="#기본-명령어" class="headerlink" title="기본 명령어"></a>기본 명령어</h4><p>docker history 명령어를 이용해 이미지 명과 태그를 명시하면 이미지 history 결과를 볼 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> &lt;이미지명:태그&gt;</span><br></pre></td></tr></table></figure><p>history 명령어의 수행결과로 각 이미지 레이어 별로 사용된 <strong>명령어</strong> , <strong>레이어의 크기</strong> , <strong>생성시각</strong> , <strong>comment</strong> 들을 확인할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">❯ docker <span class="built_in">history</span> tomcat:9.0.64-jre17</span><br><span class="line">IMAGE          CREATED       CREATED BY                                       SIZE      COMMENT</span><br><span class="line">4bd7bf12a7b2   2 years ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;catalina.sh&quot; &quot;run&quot;]     0B</span></span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 8080                   0B</span></span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c <span class="built_in">set</span> -eux;  nativeLines=<span class="string">&quot;<span class="subst">$(catalin…   0B</span></span></span><br><span class="line"><span class="subst"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c set -eux;  apt-get update;  xargs…   7.66MB</span></span></span><br><span class="line"><span class="subst"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)</span> COPY dir:01f4a9545d8608ec4…   18.6MB</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV TOMCAT_SHA512=38392b6…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV TOMCAT_VERSION=9.0.64     0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV TOMCAT_MAJOR=9            0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV GPG_KEYS=48F8E69F6390…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV LD_LIBRARY_PATH=/usr/…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV TOMCAT_NATIVE_LIBDIR=…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop) WORKDIR /usr/local/tomcat      0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c mkdir -p &quot;</span><span class="variable">$CATALINA_HOME</span><span class="string">&quot;             0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV PATH=/usr/local/tomca…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV CATALINA_HOME=/usr/lo…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c echo Verifying install ...     &amp;&amp;…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  ENV JAVA_HOME=/opt/java/o…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      2 years ago   /bin/sh -c set -eux;     ARCH=&quot;</span>$(dpkg --prin…   140MB</span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV JAVA_VERSION=jdk-17.0…   0B</span></span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c apt-get update     &amp;&amp; DEBIAN_FRON…   50MB</span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV LANG=en_US.UTF-8 LANG…   0B</span></span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;bash&quot;]                  0B</span></span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c <span class="comment">#(nop) ADD file:20805b983efd5443e…   69.2MB</span></span><br></pre></td></tr></table></figure><h4 id="명령어-모든-내용-보기-no-trunc"><a href="#명령어-모든-내용-보기-no-trunc" class="headerlink" title="명령어 모든 내용 보기 --no-trunc"></a>명령어 모든 내용 보기 <code>--no-trunc</code></h4><p><code>--no-trunc</code> 옵션을 추가해주면 위에서 생략된 명령어 내용들을 전부 보여줍니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> &lt;이미지명:태그&gt;  --no-trunc </span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">❯ docker <span class="built_in">history</span> tomcat:9.0.64-jre17 --no-trunc</span><br><span class="linespan><br><span class="line">sha256:4bd7bf12a7b2aee63bf3a8de4ff152b5344226fbb0a7c2fe71fd8af4e86b2b1a   2 years ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;catalina.sh&quot; &quot;run&quotspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nopspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="built_in">set</span> -eux;  nativeLines=<span class="string">&quot;<span class="subst">$(catalina.sh configtest 2&gt;&amp;1)</span>&quot;</span>;  nativeLines=<span class="string">&quot;<span class="subst">$(echo <span class="string">&quot;<span class="variable">$nativeLines</span>&quot;</span> | grep &#x27;Apache Tomcat Native&#x27;)</span>&quot;</span>;  nativeLines=<span class="string">&quot;<span class="subst">$(echo <span class="string">&quot;<span class="variable">$nativeLines</span>&quot;</span> | sort -u)</span>&quot;</span>;  <span class="keyword">if</span> ! <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$nativeLines</span>&quot;</span> | grep -E <span class="string">&#x27;INFO: Loaded( APR based)? Apache Tomcat Native library&#x27;</span> &gt;&amp;2; <span class="keyword">then</span>   <span class="built_in">echo</span> &gt;&amp;2 <span class="string">&quot;<span class="variable">$nativeLines</span>&quot;</span>;   <span class="built_in">exit</span> 1;  <span class="keyword">fi</spanspan><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="built_in">set</span> -eux;  apt-get update;  xargs -rt apt-get install -y --no-install-recommends &lt; <span class="string">&quot;<span class="variable">$TOMCAT_NATIVE_LIBDIR</span>/.dependencies.txt&quot;</span>;  <span class="built_in">rm</span> -rf /var/lib/apt/lists/*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               7.66MB    </span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop) COPY dir:01f4a9545d8608ec42f549bf2df78d3acf563ff4180c7fd9ac753fba68a0b6df in /usr/local/tomcatspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV TOMCAT_SHA512=38392b651fabe706fb0524c52849601299494178010bb8077af383232c20bbbda1aec4ab8898adb2cc37c07583ff0e9d3c7038ce55a22bc68c3641641b47fd1aspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV TOMCAT_VERSION=9.0.64                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        0B        </span></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nopspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV GPG_KEYS=48F8E69F6390C9F25CFEDCD268248959359E722B A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          0B        </span></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-libspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-libspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop) WORKDIR /usr/local/tomcatspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$CATALINA_HOME</span>&quot;</spanspan><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV PATH=/usr/local/tomcat/bin:/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV CATALINA_HOME=/usr/local/tomcatspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="built_in">echo</span> Verifying install ...     &amp;&amp; <span class="built_in">echo</span> java --version &amp;&amp; java --version     &amp;&amp; <span class="built_in">echo</span> Completespan><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV JAVA_HOME=/opt/java/openjdk PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="built_in">set</span> -eux;     ARCH=<span class="string">&quot;<span class="subst">$(dpkg --print-architecture)</span>&quot;</span>;     <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$&#123;ARCH&#125;</span>&quot;</span> <span class="keyword">in</span>        aarch64|arm64)          ESUM=<span class="string">&#x27;b32bf4e18a0befea32c0ff377da7a1753b91477617a9921ceb3dee6964d2799b&#x27;</span>;          BINARY_URL=<span class="string">&#x27;https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jre_aarch64_linux_hotspot_17.0.3_7.tar.gz&#x27;</span>;          ;;        armhf|arm)          ESUM=<span class="string">&#x27;fda34743f1ad8b629f42773f6519e87d13876d4b10f98b76cd47b1aa9ad18572&#x27;</span>;          BINARY_URL=<span class="string">&#x27;https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jre_arm_linux_hotspot_17.0.3_7.tar.gz&#x27;</span>;          ;;        ppc64el|powerpc:common64)          ESUM=<span class="string">&#x27;257325f38546ce34645f6e8d7e566df401c97a9ae5f107583f9ac71f0f1b04e9&#x27;</span>;          BINARY_URL=<span class="string">&#x27;https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jre_ppc64le_linux_hotspot_17.0.3_7.tar.gz&#x27;</span>;          ;;        s390x|s390:64-bit)          ESUM=<span class="string">&#x27;6790e3995a7fb8db99974d213f750bfd1631bfc0dad9946334be34d7b78fdbee&#x27;</span>;          BINARY_URL=<span class="string">&#x27;https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jre_s390x_linux_hotspot_17.0.3_7.tar.gz&#x27;</span>;          ;;        amd64|i386:x86-64)          ESUM=<span class="string">&#x27;446b1ac5504d51c2ff9b0cccff079be3ce800cf8c3a3f13bab07f2656aa1fd27&#x27;</span>;          BINARY_URL=<span class="string">&#x27;https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jre_x64_linux_hotspot_17.0.3_7.tar.gz&#x27;</span>;          ;;        *)          <span class="built_in">echo</span> <span class="string">&quot;Unsupported arch: <span class="variable">$&#123;ARCH&#125;</span>&quot;</span>;          <span class="built_in">exit</span> 1;          ;;     <span class="keyword">esac</span>;     curl -LfsSo /tmp/openjdk.tar.gz <span class="variable">$&#123;BINARY_URL&#125;</span>;     <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;ESUM&#125;</span> */tmp/openjdk.tar.gz&quot;</span> | <span class="built_in">sha256sum</span> -c -;     <span class="built_in">mkdir</span> -p /opt/java/openjdk;     <span class="built_in">cd</span> /opt/java/openjdk;     tar -xf /tmp/openjdk.tar.gz --strip-components=1;     <span class="built_in">rm</span> -rf /tmp/openjdk.tar.gz;   140MB     </span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV JAVA_VERSION=jdkspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c apt-get update     &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata curl ca-certificates fontconfig locales binutils     &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;en_US.UTF-8 UTF-8&quot;</span> &gt;&gt; /etc/locale.gen     &amp;&amp; locale-gen en_US.UTF-8     &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              50MB      </span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=enspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;bash&quotspan></span><br><span class="line">&lt;missing&gt;                                                                 2 years ago   /bin/sh -c <span class="comment">#(nop) ADD file:20805b983efd5443e34ebdfb7795010e5684eb1ca1ffea30a3e61e0089c0eee8 inspan></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Develop/">Develop</category>
      
      <category domain="https://ckck803.github.io/categories/Develop/Docker/">Docker</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/13/docker/image/docker-history/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Docker] 이미지 레이어</title>
      <link>https://ckck803.github.io/2025/04/08/docker/image/docker-layer/</link>
      <guid>https://ckck803.github.io/2025/04/08/docker/image/docker-layer/</guid>
      <pubDate>Mon, 07 Apr 2025 21:31:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/08/docker/image/docker-layer/&quot; title=&quot;[Docker] 이미지 레이어&quot;&gt;[Docker] 이미지 레이어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/07/docker/image/docker-build/&quot; title=&quot;[Docker] 이미지 Build&quot;&gt;[Docker] 이미지 Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; title=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/docker-concepts/building-images/understanding-image-layers/&quot;&gt;Docker 공식 문서 - 이미지 레이어 이해하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/docker-concepts/building-images/understanding-image-layers/&quot;&gt;Docker 공식 문서 - Storage drivers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🔍-이미지-레이어란&quot;&gt;&lt;a href=&quot;#🔍-이미지-레이어란&quot; class=&quot;headerlink&quot; title=&quot;🔍 이미지 레이어란?&quot;&gt;&lt;/a&gt;🔍 이미지 레이어란?&lt;/h2&gt;&lt;p&gt;Docker 이미지의 핵심적인 특징 중 하나는 &lt;strong&gt;레이어 기반 구조&lt;/strong&gt; 입니다. Docker 이미지는 빌드시 한번에 만들어 지는 것이 아닌 기존 이미지에 레이어를 하나씩 쌓는 방식으로 이미지를 만듭니다.&lt;/p&gt;
&lt;p&gt;이미지 레이어는 Dockerfile 에 있는 명령어를 실행할때 각 명령어별로 생성됩니다.. 각 레이어들은 읽기 전용 (read-only) 속성을 가지며, 순서대로 쌓여서 하나의 완전한 이미지를 구성합니다.&lt;/p&gt;
&lt;p&gt;최종적으로 생성되는 이미지는 여러개의 레이어들이 쌓여서 만들어진 결과물이라 생각하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/docker/dockers-image-layer.png&quot; alt=&quot;Docker 이미지 레이어&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;✅-레이어의-특징&quot;&gt;&lt;a href=&quot;#✅-레이어의-특징&quot; class=&quot;headerlink&quot; title=&quot;✅ 레이어의 특징&quot;&gt;&lt;/a&gt;✅ 레이어의 특징&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/08/docker/image/docker-layer/" title="[Docker] 이미지 레이어">[Docker] 이미지 레이어</a></li><li><a href="/2025/04/07/docker/image/docker-build/" title="[Docker] 이미지 Build">[Docker] 이미지 Build</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.docker.com/get-started/docker-concepts/building-images/understanding-image-layers/">Docker 공식 문서 - 이미지 레이어 이해하기</a></li><li><a href="https://docs.docker.com/get-started/docker-concepts/building-images/understanding-image-layers/">Docker 공식 문서 - Storage drivers</a></li></ul><h2 id="🔍-이미지-레이어란"><a href="#🔍-이미지-레이어란" class="headerlink" title="🔍 이미지 레이어란?"></a>🔍 이미지 레이어란?</h2><p>Docker 이미지의 핵심적인 특징 중 하나는 <strong>레이어 기반 구조</strong> 입니다. Docker 이미지는 빌드시 한번에 만들어 지는 것이 아닌 기존 이미지에 레이어를 하나씩 쌓는 방식으로 이미지를 만듭니다.</p><p>이미지 레이어는 Dockerfile 에 있는 명령어를 실행할때 각 명령어별로 생성됩니다.. 각 레이어들은 읽기 전용 (read-only) 속성을 가지며, 순서대로 쌓여서 하나의 완전한 이미지를 구성합니다.</p><p>최종적으로 생성되는 이미지는 여러개의 레이어들이 쌓여서 만들어진 결과물이라 생각하면 됩니다.</p><p><img src="/images/docker/dockers-image-layer.png" alt="Docker 이미지 레이어"></p><h2 id="✅-레이어의-특징"><a href="#✅-레이어의-특징" class="headerlink" title="✅ 레이어의 특징"></a>✅ 레이어의 특징</h2><ul><li>캐싱<ul><li>동일한 Dockerfile 명령어가 이전과 같다면 해당 레이어는 재사용됩니다.</li><li>캐싱된 이미지를 사용하면 빌드시간을 단축할 수 있습니다.</li></ul></li><li>공유성<ul><li>완성된 이미지는 별도로 존재하나 내부의 동일한 레이어는 중복되지 않고 공유되어 저장공간이 절약됩니다.</li></ul></li><li>불변성<ul><li>한번 만들진 레어는 변경이 불가능합니다.</li><li>변경하기 위해서는 새로운 명령어를 이용해 새로운 레어어로 덮어씌어야 합니다.</li></ul></li></ul><h2 id="📋-Dockerfile-명령어별-레이어"><a href="#📋-Dockerfile-명령어별-레이어" class="headerlink" title="📋 Dockerfile 명령어별 레이어"></a>📋 Dockerfile 명령어별 레이어</h2><p>아래 Dockerfile을 기준으로 이미지를 빌드하면 아래와 같이 각 명령어는 하나의 레이어를 생성합니다</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1단계: 베이스 이미지 사용</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="comment"># 2단계: 패키지 업데이트</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="comment"># 3단계: 필요한 패키지 설치</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y python3</span></span><br><span class="line"><span class="comment"># 4단계: 애플리케이션 코드 복사</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br></pre></td></tr></table></figure><h4 id="각-명령어별-이미지-레이어-구조"><a href="#각-명령어별-이미지-레이어-구조" class="headerlink" title="각 명령어별 이미지 레이어 구조"></a>각 명령어별 이미지 레이어 구조</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ Layer 4 ] - COPY . /app           -&gt; 소스코드 등 앱 파일을 /app에 복사</span><br><span class="line">[ Layer 3 ] - RUN apt install       -&gt; python3 설치</span><br><span class="line">[ Layer 2 ] - RUN apt update        -&gt; 패키지 목록 갱신</span><br><span class="line">[ Layer 1 ] - FROM ubuntu:20.04     -&gt; 베이스 이미지 (Ubuntu OS)</span><br></pre></td></tr></table></figure><h2 id="🕵️-컨테이너-실행시-이미지-레이어"><a href="#🕵️-컨테이너-실행시-이미지-레이어" class="headerlink" title="🕵️ 컨테이너 실행시 이미지 레이어"></a>🕵️ 컨테이너 실행시 이미지 레이어</h2><p>컨테이너 실행시 Docker 이미지 위에 <strong>쓰기 가능한 레이어(writable layer)</strong> 가 하나 추가되어 실행됩니다. 이 레이어는 컨테이너에서 생성되거나 수정된 파일을 저장하며, 컨테이너가 삭제되면 함께 사라집니다.</p><h2 id="🤔-각-레이어는-이전명령어를-포함하는-것인가-아니면-의존-관계인-것인가"><a href="#🤔-각-레이어는-이전명령어를-포함하는-것인가-아니면-의존-관계인-것인가" class="headerlink" title="🤔 각 레이어는 이전명령어를 포함하는 것인가? 아니면 의존 관계인 것인가?"></a>🤔 각 레이어는 이전명령어를 포함하는 것인가? 아니면 의존 관계인 것인가?</h2><p>이미지 레이어를 공부하다보니 자연스럽게 생긴 의문이 각 이미지 레이어는 기존 이미지레이어를 포함하는 관계인가, 아니면 참조하는 관계인가 하는 의문이 생겼습니다. 결론부터 말하면 각 이미지 레이어는 레이어는 포함하는 게 아니라 “이전 레이어 위에 덧붙이는” 참조 관계입니다.</p><p>각 레이어는 그 이전 레이어를 이어받아 그 위에 파일 시스템의 변화만 기록합니다. 때문에, 각 레이어는 기존 레이어에 의존관계가 형성되게 됩니다.</p><h4 id="🧐-레이어와-의존관계"><a href="#🧐-레이어와-의존관계" class="headerlink" title="🧐 레이어와 의존관계"></a>🧐 레이어와 의존관계</h4><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span>          <span class="comment"># Layer 1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update         <span class="comment"># Layer 2</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y vim <span class="comment"># Layer 3</span></span></span><br></pre></td></tr></table></figure><ul><li>Layer 1: ubuntu:20.04의 기본 파일 시스템을 가진 상태</li><li>Layer 2: Layer 1 위에 apt-get update로 패키지 목록 변경된 내용만 반영</li><li>Layer 3: Layer 2 위에 vim 설치로 인한 파일 시스템 변경이 기록</li></ul><p>레이어 자체는 변경된 내용만 저장하고, 그 내용을 이전 레이어 위에 명령어를 <code>덧씌우는 방식</code> 이기 때문에 특정 레이어만 떼어내서 단독으로 사용할 수 없습니다. 따라서, Layer 3 을 사용하기 위해서는 Layer 2, Layer 1 가 있어야 합니다.</p>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Develop/">Develop</category>
      
      <category domain="https://ckck803.github.io/categories/Develop/Docker/">Docker</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/08/docker/image/docker-layer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Docker] 이미지 Build</title>
      <link>https://ckck803.github.io/2025/04/07/docker/image/docker-build/</link>
      <guid>https://ckck803.github.io/2025/04/07/docker/image/docker-build/</guid>
      <pubDate>Sun, 06 Apr 2025 21:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/docker/docker.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;🔍-Docker-Build-란&quot;&gt;&lt;a href=&quot;#🔍-Docker-Build-란&quot; class=&quot;headerlink&quot; title=&quot;🔍 Docker Build 란?&quot;&gt;&lt;/a&gt;🔍 Docker Build 란?&lt;/h2&gt;&lt;p&gt;Docker Build 는 서비스를 격리된 환경에서 실행할 수 있도록 운영체제 및 필요한 의존성과 설정, 실행 파일등을 하나의 이미지로 패키징하는 것을 의미합니다.&lt;/p&gt;
&lt;p&gt;이미지 Build 는 Dockerfile 을 기반으로 수행되며, Dockerfile 에는 이미지 생성에 필요한 명령어들이 있으며, 순서대로 실행됩니다.&lt;/p&gt;
&lt;h2 id=&quot;✅-Build-명령어&quot;&gt;&lt;a href=&quot;#✅-Build-명령어&quot; class=&quot;headerlink&quot; title=&quot;✅ Build 명령어&quot;&gt;&lt;/a&gt;✅ Build 명령어&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 현재 디렉토리 위치에 Dockerfile 가 있고 현재 위치에서 이미지를 생성할 경우&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker build -t &amp;lt;만들 이미지 이름&amp;gt;:&amp;lt;만들 이미지 태그&amp;gt; .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Dockerfile 이 다른 경로에 있을 경우&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker build -t &amp;lt;만들 이미지 이름&amp;gt;:&amp;lt;만들 이미지 태그&amp;gt; -f &amp;lt;파일 경로&amp;gt; &amp;lt;빌드 컨텍스트 경로&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Dockerfile 명이 다를 경우우&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker build -t &amp;lt;만들 이미지 이름&amp;gt;:&amp;lt;만들 이미지 태그&amp;gt; -f &amp;lt;파일 경로/파일 이름&amp;gt; &amp;lt;빌드 컨텍스트 경로&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;✅-이미지지-레이어&quot;&gt;&lt;a href=&quot;#✅-이미지지-레이어&quot; class=&quot;headerlink&quot; title=&quot;✅ 이미지지 레이어&quot;&gt;&lt;/a&gt;✅ 이미지지 레이어&lt;/h2&gt;&lt;p&gt;Docker 는 Build 시 Dockerfile 의 베이스가 되는 이미지부터 시작해 각 명령어를 실행할 때마다 새로운 이미지를 생성합니다. 이것을 이미지 레이어를 생성한다고 이야기 합니다.&lt;/p&gt;
&lt;p&gt;때문에 초기 명령어들이 같고 중간 단계 부터 달라지는 Dockerfile 의 경우 빌드시 각각 이미지 레이어를 생성하는게 아닌 기존에 만들어진 이미지 레이어를 바탕으로 새로운 이미지를 생성해 빌드시간과 저장공간을 절약할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;✅-Dockerfile&quot;&gt;&lt;a href=&quot;#✅-Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;✅ Dockerfile&quot;&gt;&lt;/a&gt;✅ Dockerfile&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/docker/docker.png"></p><h2 id="🔍-Docker-Build-란"><a href="#🔍-Docker-Build-란" class="headerlink" title="🔍 Docker Build 란?"></a>🔍 Docker Build 란?</h2><p>Docker Build 는 서비스를 격리된 환경에서 실행할 수 있도록 운영체제 및 필요한 의존성과 설정, 실행 파일등을 하나의 이미지로 패키징하는 것을 의미합니다.</p><p>이미지 Build 는 Dockerfile 을 기반으로 수행되며, Dockerfile 에는 이미지 생성에 필요한 명령어들이 있으며, 순서대로 실행됩니다.</p><h2 id="✅-Build-명령어"><a href="#✅-Build-명령어" class="headerlink" title="✅ Build 명령어"></a>✅ Build 명령어</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 현재 디렉토리 위치에 Dockerfile 가 있고 현재 위치에서 이미지를 생성할 경우</span></span><br><span class="line">docker build -t &lt;만들 이미지 이름&gt;:&lt;만들 이미지 태그&gt; .</span><br><span class="line"><span class="comment"># Dockerfile 이 다른 경로에 있을 경우</span></span><br><span class="line">docker build -t &lt;만들 이미지 이름&gt;:&lt;만들 이미지 태그&gt; -f &lt;파일 경로&gt; &lt;빌드 컨텍스트 경로&gt;</span><br><span class="line"><span class="comment"># Dockerfile 명이 다를 경우우</span></span><br><span class="line">docker build -t &lt;만들 이미지 이름&gt;:&lt;만들 이미지 태그&gt; -f &lt;파일 경로/파일 이름&gt; &lt;빌드 컨텍스트 경로&gt;</span><br></pre></td></tr></table></figure><h2 id="✅-이미지지-레이어"><a href="#✅-이미지지-레이어" class="headerlink" title="✅ 이미지지 레이어"></a>✅ 이미지지 레이어</h2><p>Docker 는 Build 시 Dockerfile 의 베이스가 되는 이미지부터 시작해 각 명령어를 실행할 때마다 새로운 이미지를 생성합니다. 이것을 이미지 레이어를 생성한다고 이야기 합니다.</p><p>때문에 초기 명령어들이 같고 중간 단계 부터 달라지는 Dockerfile 의 경우 빌드시 각각 이미지 레이어를 생성하는게 아닌 기존에 만들어진 이미지 레이어를 바탕으로 새로운 이미지를 생성해 빌드시간과 저장공간을 절약할 수 있습니다.</p><h2 id="✅-Dockerfile"><a href="#✅-Dockerfile" class="headerlink" title="✅ Dockerfile"></a>✅ Dockerfile</h2><p><code>node:18</code> 이라는 베이스 이미지를 시작으로 각 명령어를 실행할때마다 이미지를 생성합니다.</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span>                 <span class="comment"># Node.js 기반 이미지 사용</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app                 <span class="comment"># 앱 디렉토리 생성</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./        <span class="comment"># package.json 복사 </span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install              <span class="comment"># 의존성 설치</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .                     <span class="comment"># 앱 소스 복사</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span>                  <span class="comment"># 포트 개방</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]         <span class="comment"># 앱 실행</span></span></span><br></pre></td></tr></table></figure><p>아래 Dockerfile 은 5라인까지는 위 Dockerfile 과 같은 명령어들이 사용되고 있습니다. 빌드시 위에서 5라인에 생성된 이미지 레이어를 기반으로 새로운 이미지를 생성하게 됩니다.</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span>                 <span class="comment"># Node.js 기반 이미지 사용</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app                 <span class="comment"># 앱 디렉토리 생성</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./        <span class="comment"># package.json 복사 </span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install              <span class="comment"># 의존성 설치</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .                     <span class="comment"># 앱 소스 복사</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span>                  <span class="comment"># 포트 개방</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;dev&quot;</span>]    <span class="comment"># 앱 실행</span></span></span><br></pre></td></tr></table></figure><h2 id="✅-멀티-스테이지-빌드"><a href="#✅-멀티-스테이지-빌드" class="headerlink" title="✅ 멀티 스테이지 빌드"></a>✅ 멀티 스테이지 빌드</h2><p>빌드와 실행 환경을 분리하고 싶을 때 사용됩니다</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Build stage</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span> as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Production stage</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/dist /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Develop/">Develop</category>
      
      <category domain="https://ckck803.github.io/categories/Develop/Docker/">Docker</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/07/docker/image/docker-build/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Docker] Network - 컨테이너간 통신</title>
      <link>https://ckck803.github.io/2025/04/06/docker/network/docker-network/</link>
      <guid>https://ckck803.github.io/2025/04/06/docker/network/docker-network/</guid>
      <pubDate>Sat, 05 Apr 2025 21:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/docker/docker.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/06/docker/volume/docker-volume/&quot; title=&quot;[Docker] Volume - 컨테이너 데이터 관리&quot;&gt;[Docker] Volume - 컨테이너 데이터 관리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/06/docker/network/docker-network/&quot; title=&quot;[Docker] Network - 컨테이너간 통신&quot;&gt;[Docker] Network - 컨테이너간 통신&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2023/02/08/docker/docker/&quot; title=&quot;[Docker]&quot;&gt;[Docker]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;📌-Docker-Network-란&quot;&gt;&lt;a href=&quot;#📌-Docker-Network-란&quot; class=&quot;headerlink&quot; title=&quot;📌 Docker Network 란?&quot;&gt;&lt;/a&gt;📌 Docker Network 란?&lt;/h2&gt;&lt;p&gt;Docker Network는 컨테이너 간 통신을 가능하게 해주는 가상 네트워크입니다. &lt;/p&gt;
&lt;p&gt;컨테이너는 독립적인 환경에서 실행되지만, 애플리케이션을 만들다 보면 서로 데이터를 주고받아야 하거나 외부 요청을 받아야 할 일이 많습니다. Docker 네트워크는 이러한 컨테이너간 통신을 가능하게 해주는 역할을 합니다.&lt;/p&gt;
&lt;h2 id=&quot;🔍-Docker-Network-의-종류&quot;&gt;&lt;a href=&quot;#🔍-Docker-Network-의-종류&quot; class=&quot;headerlink&quot; title=&quot;🔍 Docker Network 의 종류&quot;&gt;&lt;/a&gt;🔍 Docker Network 의 종류&lt;/h2&gt;&lt;p&gt;Docker는 기본적으로 다음과 같은 네트워크 드라이버들을 제공합니다&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;드라이버&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bridge&lt;/td&gt;
&lt;td&gt;기본 드라이버. 컨테이너 간 통신이 가능하며, 같은 호스트에서 작동합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td&gt;컨테이너가 호스트의 네트워크를 그대로 사용합니다. 격리는 없지만 속도는 빠릅니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;네트워크를 사용하지 않도록 설정합니다. 완전한 격리가 필요할 때 사용합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay&lt;/td&gt;
&lt;td&gt;여러 호스트 간 컨테이너를 연결할 수 있습니다. Docker Swarm에서 유용합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macvlan&lt;/td&gt;
&lt;td&gt;컨테이너에 고유한 MAC 주소를 부여해 물리 네트워크처럼 동작시킵니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;✅-Docker-네트워크-생성&quot;&gt;&lt;a href=&quot;#✅-Docker-네트워크-생성&quot; class=&quot;headerlink&quot; title=&quot;✅ Docker 네트워크 생성&quot;&gt;&lt;/a&gt;✅ Docker 네트워크 생성&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/docker/docker.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/06/docker/volume/docker-volume/" title="[Docker] Volume - 컨테이너 데이터 관리">[Docker] Volume - 컨테이너 데이터 관리</a></li><li><a href="/2025/04/06/docker/network/docker-network/" title="[Docker] Network - 컨테이너간 통신">[Docker] Network - 컨테이너간 통신</a></li><li><a href="/2023/02/08/docker/docker/" title="[Docker]">[Docker]</a></li></ul><h2 id="📌-Docker-Network-란"><a href="#📌-Docker-Network-란" class="headerlink" title="📌 Docker Network 란?"></a>📌 Docker Network 란?</h2><p>Docker Network는 컨테이너 간 통신을 가능하게 해주는 가상 네트워크입니다. </p><p>컨테이너는 독립적인 환경에서 실행되지만, 애플리케이션을 만들다 보면 서로 데이터를 주고받아야 하거나 외부 요청을 받아야 할 일이 많습니다. Docker 네트워크는 이러한 컨테이너간 통신을 가능하게 해주는 역할을 합니다.</p><h2 id="🔍-Docker-Network-의-종류"><a href="#🔍-Docker-Network-의-종류" class="headerlink" title="🔍 Docker Network 의 종류"></a>🔍 Docker Network 의 종류</h2><p>Docker는 기본적으로 다음과 같은 네트워크 드라이버들을 제공합니다</p><table><thead><tr><th>드라이버</th><th>설명</th></tr></thead><tbody><tr><td>bridge</td><td>기본 드라이버. 컨테이너 간 통신이 가능하며, 같은 호스트에서 작동합니다.</td></tr><tr><td>host</td><td>컨테이너가 호스트의 네트워크를 그대로 사용합니다. 격리는 없지만 속도는 빠릅니다.</td></tr><tr><td>none</td><td>네트워크를 사용하지 않도록 설정합니다. 완전한 격리가 필요할 때 사용합니다.</td></tr><tr><td>overlay</td><td>여러 호스트 간 컨테이너를 연결할 수 있습니다. Docker Swarm에서 유용합니다.</td></tr><tr><td>macvlan</td><td>컨테이너에 고유한 MAC 주소를 부여해 물리 네트워크처럼 동작시킵니다.</td></tr></tbody></table><h2 id="✅-Docker-네트워크-생성"><a href="#✅-Docker-네트워크-생성" class="headerlink" title="✅ Docker 네트워크 생성"></a>✅ Docker 네트워크 생성</h2><p>Docker 네트워크를 사용하면 다음과 같은 기능들을 사용할 수 있습니다.</p><ul><li>같은 네트워크내 컨테이너 간 이름 기반 통신 가능</li><li>자체 서브넷 설정 가능</li><li>네트워크 격리를 통해 보안 강화</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create \</span><br><span class="line">  --driver bridge \</span><br><span class="line">  --subnet 192.168.100.0/24 \  <span class="comment"># my-bridge 를 이용하는 Docker 는 192.168.100.0/24 내 IP 를 할당 받습니다.</span></span><br><span class="line">  my-bridge</span><br></pre></td></tr></table></figure><h2 id="✅-Docker-Network-사용"><a href="#✅-Docker-Network-사용" class="headerlink" title="✅ Docker Network 사용"></a>✅ Docker Network 사용</h2><h4 id="1-네트워크-생성"><a href="#1-네트워크-생성" class="headerlink" title="1. 네트워크 생성"></a>1. 네트워크 생성</h4><p>Docker 명령어로 생성하는 네트워크는 기본적으로 bridge 네트워크를 사용합니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 사용자 정의 브리지 네트워크 생성</span></span><br><span class="line">docker network create my-bridge-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 네트워크 확인</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NETWORK ID     NAME                                                                DRIVER    SCOPE</span><br><span class="line">970c8ca1f098   app_default                                                         bridge    <span class="built_in">local</span></span><br><span class="line">b7cc4195660a   bridge                                                              bridge    <span class="built_in">local</span></span><br><span class="line">752114a3f537   cluster4_default                                                    bridge    <span class="built_in">local</span></span><br><span class="line">cefaa7d0f84f   discovery-server_msa                                                bridge    <span class="built_in">local</span></span><br><span class="line">b15c797bd7cb   host                                                                host      <span class="built_in">local</span></span><br><span class="line">e30ba0356072   minikube                                                            bridge    <span class="built_in">local</span></span><br><span class="line">1d556958a0e3   monitoring_kafka_network                                            bridge    <span class="built_in">local</span></span><br><span class="line">c11f235772a0   my-bridge-network                                                   bridge    <span class="built_in">local</span></span><br><span class="line">09369e87d3bf   mysql_default                                                       bridge    <span class="built_in">local</span></span><br><span class="line">12bba3372bec   none                                                                null      <span class="built_in">local</span></span><br><span class="line">b6805d2acdd3   redis-insight_default                                               bridge    <span class="built_in">local</span></span><br><span class="line">2e03a529f3f0   spring-cloud                                                        bridge    <span class="built_in">local</span></span><br></pre></td></tr></table></figure><h4 id="2-컨테이너-2개-실행-같은-네트워크에-연결"><a href="#2-컨테이너-2개-실행-같은-네트워크에-연결" class="headerlink" title="2. 컨테이너 2개 실행 (같은 네트워크에 연결):"></a>2. 컨테이너 2개 실행 (같은 네트워크에 연결):</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name container1 --network my-bridge-network nginx</span><br><span class="line">docker run -it --name container2 --network my-bridge-network alpine sh</span><br></pre></td></tr></table></figure><p>컨테이너2에서 container1 의 이름으로 접속이 가능합니다<br>👉 같은 네트워크에 연결된 컨테이너는 이름으로 서로 통신 가능하다는 점이 포인트입니다!</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># container2 내부에서</span></span><br><span class="line">ping container1</span><br></pre></td></tr></table></figure><h2 id="✅-Docker-네트워크-관련-명령어"><a href="#✅-Docker-네트워크-관련-명령어" class="headerlink" title="✅ Docker 네트워크 관련 명령어"></a>✅ Docker 네트워크 관련 명령어</h2><table><thead><tr><th align="left">명령어</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">docker network ls</td><td align="left">네트워크 목록 보기</td></tr><tr><td align="left">docker network inspect &lt;이름&gt;</td><td align="left">네트워크 상세 정보 확인</td></tr><tr><td align="left">docker network create &lt;이름&gt;</td><td align="left">네트워크 생성</td></tr><tr><td align="left">docker network rm &lt;이름&gt;</td><td align="left">네트워크 삭제</td></tr><tr><td align="left">docker network connect &lt;네트워크&gt; &lt;컨테이너&gt;</td><td align="left">컨테이너를 네트워크에 연결</td></tr><tr><td align="left">docker network disconnect &lt;네트워크&gt; &lt;컨테이너&gt;</td><td align="left">연결 해제</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Develop/">Develop</category>
      
      <category domain="https://ckck803.github.io/categories/Develop/Docker/">Docker</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/06/docker/network/docker-network/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Docker] Volume - 컨테이너 데이터 관리</title>
      <link>https://ckck803.github.io/2025/04/06/docker/volume/docker-volume/</link>
      <guid>https://ckck803.github.io/2025/04/06/docker/volume/docker-volume/</guid>
      <pubDate>Sat, 05 Apr 2025 21:31:46 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/docker/docker.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/06/docker/volume/docker-volume/&quot; title=&quot;[Docker] Volume - 컨테이너 데이터 관리&quot;&gt;[Docker] Volume - 컨테이너 데이터 관리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/06/docker/network/docker-network/&quot; title=&quot;[Docker] Network - 컨테이너간 통신&quot;&gt;[Docker] Network - 컨테이너간 통신&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2023/02/08/docker/docker/&quot; title=&quot;[Docker]&quot;&gt;[Docker]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🤔-Docker-Volume-이-왜-필요한가&quot;&gt;&lt;a href=&quot;#🤔-Docker-Volume-이-왜-필요한가&quot; class=&quot;headerlink&quot; title=&quot;🤔 Docker Volume 이 왜 필요한가?&quot;&gt;&lt;/a&gt;🤔 Docker Volume 이 왜 필요한가?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;컨테이너내 데이터는 휘발성입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker 와 컨테이너 기술이 막 떠오를때 PC 에 깔아서 개발을 하고 있는데 Docker 내에서 설정한 값들이 재실행할때 마다 초기화 되는 현상들을 겪었습니다. 당시 너무 화가나서 여러 책들을 읽어봤는데 생각해보니 컨테이너의 특성을 제대로 이해하지 못해 생기는 문제였었습니다.&lt;/p&gt;
&lt;p&gt;컨테이너는 기본적으로 &lt;strong&gt;휘발성&lt;/strong&gt; 이기 때문에 컨테이너가 종료되거나 삭제되면 내부 데이터도 함께 사라집니다. 쉽게 생각해서 격리돼 있는 컨테이너의 특성상 컨테이너가 생성한 모든 파일들은 결국 컨테이너내에서만 존재하고 컨테이너 삭제시에는 컨테이너와 함께 데이터도 삭제가 되는 것입니다.&lt;/p&gt;
&lt;p&gt;Docker 에서는 Docker Volume 을 통해 컨테이너 내에서의 데이터 휘발성 문제를 해결하고 영구적으로 저장할 수 있는 방법을 제공합니다.&lt;/p&gt;
&lt;h2 id=&quot;✅-Docker-Volume-이란&quot;&gt;&lt;a href=&quot;#✅-Docker-Volume-이란&quot; class=&quot;headerlink&quot; title=&quot;✅ Docker Volume 이란?&quot;&gt;&lt;/a&gt;✅ Docker Volume 이란?&lt;/h2&gt;&lt;p&gt;Docker Volume 은 컨테이너 &lt;strong&gt;외부&lt;/strong&gt; 에 데이터를 저장할 수 있는 공간입니다. 컨테이너와는 별도로 존재하기 때문에, 컨테이너를 삭제하더라도 데이터는 유지되며 데이터 영속성이 보장됩니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/docker/docker.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/06/docker/volume/docker-volume/" title="[Docker] Volume - 컨테이너 데이터 관리">[Docker] Volume - 컨테이너 데이터 관리</a></li><li><a href="/2025/04/06/docker/network/docker-network/" title="[Docker] Network - 컨테이너간 통신">[Docker] Network - 컨테이너간 통신</a></li><li><a href="/2023/02/08/docker/docker/" title="[Docker]">[Docker]</a></li></ul><h2 id="🤔-Docker-Volume-이-왜-필요한가"><a href="#🤔-Docker-Volume-이-왜-필요한가" class="headerlink" title="🤔 Docker Volume 이 왜 필요한가?"></a>🤔 Docker Volume 이 왜 필요한가?</h2><blockquote><p>컨테이너내 데이터는 휘발성입니다.</p></blockquote><p>Docker 와 컨테이너 기술이 막 떠오를때 PC 에 깔아서 개발을 하고 있는데 Docker 내에서 설정한 값들이 재실행할때 마다 초기화 되는 현상들을 겪었습니다. 당시 너무 화가나서 여러 책들을 읽어봤는데 생각해보니 컨테이너의 특성을 제대로 이해하지 못해 생기는 문제였었습니다.</p><p>컨테이너는 기본적으로 <strong>휘발성</strong> 이기 때문에 컨테이너가 종료되거나 삭제되면 내부 데이터도 함께 사라집니다. 쉽게 생각해서 격리돼 있는 컨테이너의 특성상 컨테이너가 생성한 모든 파일들은 결국 컨테이너내에서만 존재하고 컨테이너 삭제시에는 컨테이너와 함께 데이터도 삭제가 되는 것입니다.</p><p>Docker 에서는 Docker Volume 을 통해 컨테이너 내에서의 데이터 휘발성 문제를 해결하고 영구적으로 저장할 수 있는 방법을 제공합니다.</p><h2 id="✅-Docker-Volume-이란"><a href="#✅-Docker-Volume-이란" class="headerlink" title="✅ Docker Volume 이란?"></a>✅ Docker Volume 이란?</h2><p>Docker Volume 은 컨테이너 <strong>외부</strong> 에 데이터를 저장할 수 있는 공간입니다. 컨테이너와는 별도로 존재하기 때문에, 컨테이너를 삭제하더라도 데이터는 유지되며 데이터 영속성이 보장됩니다.</p><p>또한, Docker Volume 은 컨테이너와 호스트 시스템 간에 데이터를 공유하거나 컨테이너 간 데이터를 공유할 때 사용할 수 있습니다.</p><h4 id="호스트-PC-에서-Docker-Volume-접근"><a href="#호스트-PC-에서-Docker-Volume-접근" class="headerlink" title="호스트 PC 에서 Docker Volume 접근"></a>호스트 PC 에서 Docker Volume 접근</h4><p>호스트에서 Docker Volume 으로 접근하기 위한 경로는 운영체제 마다 상이합니다. 일단, Linux 환경에서는 Docker Volume 이 기본적으로 <code>/var/lib/docker/volumes</code> 경로 아래에 저장되며, Volume 이름별로 <code>/var/lib/docker/volumes/&lt;volume_name&gt;/_data</code> 에 데이터가 생성돼 해당 경로로 이동하면 접근이 가능합니다. 하지만 윈도우나 맥 환경에서 가상화된 Linux 환경을 띄우고 그 안에서 Docker 를 운영하기 때문에 접근이 어렵습니다.</p><h2 id="✅-Docker-Volume-사용"><a href="#✅-Docker-Volume-사용" class="headerlink" title="✅ Docker Volume 사용"></a>✅ Docker Volume 사용</h2><h4 id="1-Volume-생성"><a href="#1-Volume-생성" class="headerlink" title="1 Volume 생성"></a>1 Volume 생성</h4><p>Docker Volume은 다음과 같은 명령어로 생성할 수 있습니다. 생성된 Volume은 Docker 호스트의 특정 디렉토리에 저장되며, 이를 통해 데이터가 외부에 안전하게 보관됩니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create my_volume</span><br></pre></td></tr></table></figure><h4 id="3-2-컨테이너에-Volume-마운트하기"><a href="#3-2-컨테이너에-Volume-마운트하기" class="headerlink" title="3.2 컨테이너에 Volume 마운트하기"></a>3.2 컨테이너에 Volume 마운트하기</h4><p>생성한 Volume을 컨테이너에 마운트하는 방법은 다음과 같습니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name my_container \</span><br><span class="line">  -v my_volume:/app/data \</span><br><span class="line">  my_image</span><br></pre></td></tr></table></figure><h4 id="3-Volume-리스트-및-삭제"><a href="#3-Volume-리스트-및-삭제" class="headerlink" title="3 Volume 리스트 및 삭제"></a>3 Volume 리스트 및 삭제</h4><p>현재 생성된 Volume 목록을 확인하려면 다음 명령어를 사용합니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>Docker Volume 을 명시적으로 생성하지 않을 경우 생성된 Volume 목록 확인시 해시된 이름으로 보여져 파악하기가 어렵습니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     49ff6b4a76033b6511cd4ff656a08288e00db0c791d734c8d8f22c61265c570e</span><br><span class="line"><span class="built_in">local</span>     87b7e5bc9d75151f2ca3fe25cfc38d620434133231e3a59ebd8f99c1f43e08b6</span><br><span class="line"><span class="built_in">local</span>     092efe87a570de9ec8a80192b753b66a952abeae53f274e09c867074d1d09fc6</span><br><span class="line"><span class="built_in">local</span>     194d517db62f9a6569e47fce6e99415152c51fdfa1dfaa3a1f275df3cf0396fd</span><br><span class="line"><span class="built_in">local</span>     minikube</span><br><span class="line"><span class="built_in">local</span>     mysql_grafana_data</span><br><span class="line"><span class="built_in">local</span>     mysql_prometheus_data</span><br><span class="line"><span class="built_in">local</span>     redis-insight_redis_insight_volume_data</span><br><span class="line"><span class="built_in">local</span>     redis-insight_redis_volume_data</span><br><span class="line"><span class="built_in">local</span>     redisinsight</span><br><span class="line"><span class="built_in">local</span>     spring-websocket-kafka_redis_insight_volume_data</span><br><span class="line"><span class="built_in">local</span>     spring-websocket-kafka_redis_volume_data</span><br></pre></td></tr></table></figure><p>사용하지 않는 Volume은 다음과 같이 삭제할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> my_volume</span><br></pre></td></tr></table></figure><p>전체 사용하지 않는 Volume을 한꺼번에 삭제하려면 <code>prune</code> 명령어를 사용하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><h2 id="✅-Docker-Volume-사용-예제"><a href="#✅-Docker-Volume-사용-예제" class="headerlink" title="✅ Docker Volume 사용 예제"></a>✅ Docker Volume 사용 예제</h2><p>컨테이너로 구성된 데이터 베이스의 데이터를 영속적으로 저장하기 위해 Docker Volume 을 이용합니다. 해당 명령어로 MySQL 데이터 베이스를 실행하게 되면 실행되는 컨테이너는 다를지라도 항상 같은 Volume 을 바라보게 됩니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=1212!@!@ \</span><br><span class="line">  -v mysql_data:/var/lib/mysql \</span><br><span class="line">  mysql:latest</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Develop/">Develop</category>
      
      <category domain="https://ckck803.github.io/categories/Develop/Docker/">Docker</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/06/docker/volume/docker-volume/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[데이터 베이스] Cursor 란?</title>
      <link>https://ckck803.github.io/2025/04/05/database/database-cursor/</link>
      <guid>https://ckck803.github.io/2025/04/05/database/database-cursor/</guid>
      <pubDate>Sat, 05 Apr 2025 11:10:40 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/images/database/database.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/database/large-select/&quot; title=&quot;[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?&quot;&gt;[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/database/database-cursor/&quot; title=&quot;[데이터 베이스] Cursor 란?&quot;&gt;[데이터 베이스] Cursor 란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🔎-Cursor-란&quot;&gt;&lt;a href=&quot;#🔎-Cursor-란&quot; class=&quot;headerlink&quot; title=&quot;🔎 Cursor 란?&quot;&gt;&lt;/a&gt;🔎 Cursor 란?&lt;/h2&gt;&lt;p&gt;커서는 쿼리 결과셋을 탐색할 수 있는 &lt;strong&gt;포인터&lt;/strong&gt; 입니다. DB 는 쿼리 결과 데이터를 반환할 때, &lt;strong&gt;커서(cursor)&lt;/strong&gt; 를 생성하여 현재 어디까지 데이터가 반환됐는지, 어디부터 읽으면 될지를 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;주로 프로그램 내에서 루프를 돌며 한 줄씩 데이터를 처리할 필요가 있을 때 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/database/database-cursor2.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;✅-Cursor-사용법&quot;&gt;&lt;a href=&quot;#✅-Cursor-사용법&quot; class=&quot;headerlink&quot; title=&quot;✅ Cursor 사용법&quot;&gt;&lt;/a&gt;✅ Cursor 사용법&lt;/h2&gt;&lt;h4 id=&quot;1-DECLARE-Cursor-선언-및-생성&quot;&gt;&lt;a href=&quot;#1-DECLARE-Cursor-선언-및-생성&quot; class=&quot;headerlink&quot; title=&quot;1. DECLARE - Cursor 선언 및 생성&quot;&gt;&lt;/a&gt;1. DECLARE - Cursor 선언 및 생성&lt;/h4&gt;&lt;p&gt;커서를 사용하고 싶은 쿼리가 있으면 아래 SQL 을 이용해 커서를 정의 및 생성해줍니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/database/database.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/05/database/large-select/" title="[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?">[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?</a></li><li><a href="/2025/04/05/database/database-cursor/" title="[데이터 베이스] Cursor 란?">[데이터 베이스] Cursor 란?</a></li></ul><h2 id="🔎-Cursor-란"><a href="#🔎-Cursor-란" class="headerlink" title="🔎 Cursor 란?"></a>🔎 Cursor 란?</h2><p>커서는 쿼리 결과셋을 탐색할 수 있는 <strong>포인터</strong> 입니다. DB 는 쿼리 결과 데이터를 반환할 때, <strong>커서(cursor)</strong> 를 생성하여 현재 어디까지 데이터가 반환됐는지, 어디부터 읽으면 될지를 알 수 있습니다.</p><p>주로 프로그램 내에서 루프를 돌며 한 줄씩 데이터를 처리할 필요가 있을 때 사용합니다.</p><p><img src="/images/database/database-cursor2.png"></p><h2 id="✅-Cursor-사용법"><a href="#✅-Cursor-사용법" class="headerlink" title="✅ Cursor 사용법"></a>✅ Cursor 사용법</h2><h4 id="1-DECLARE-Cursor-선언-및-생성"><a href="#1-DECLARE-Cursor-선언-및-생성" class="headerlink" title="1. DECLARE - Cursor 선언 및 생성"></a>1. DECLARE - Cursor 선언 및 생성</h4><p>커서를 사용하고 싶은 쿼리가 있으면 아래 SQL 을 이용해 커서를 정의 및 생성해줍니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><h4 id="2-OPEN-Cursor-열기"><a href="#2-OPEN-Cursor-열기" class="headerlink" title="2. OPEN - Cursor 열기"></a>2. OPEN - Cursor 열기</h4><p>생성된 커서를 사용하기 위애 열어줍니다. 이때, 커서를 사용하기 위한 SQL 문이 실행돼 결과 데이터가 메모리에 올라가고 커서는 데이터의 첫번째 행을 가르키게 됩니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name;</span><br></pre></td></tr></table></figure><h4 id="3-Fetch-데이터-가져오기"><a href="#3-Fetch-데이터-가져오기" class="headerlink" title="3. Fetch - 데이터 가져오기"></a>3. Fetch - 데이터 가져오기</h4><p>커서를 한행씩 이동시키면서 기르키고 있던 값을 변수에 저장합니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> NEXT <span class="keyword">FROM</span> cursor_name <span class="keyword">INTO</span> <span class="variable">@id</span>, <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure><p>조회된 전체데이터를 읽을때까지 루프를 돌면서 데이터를 가져옵니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE @<span class="variable">@FETCH_STATUS</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 각 행에 대해 처리</span></span><br><span class="line">    PRINT <span class="variable">@id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">FETCH</span> NEXT <span class="keyword">FROM</span> cursor_name <span class="keyword">INTO</span> <span class="variable">@id</span>, <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h4 id="4-CLOSE-커서-닫기"><a href="#4-CLOSE-커서-닫기" class="headerlink" title="4. CLOSE - 커서 닫기"></a>4. CLOSE - 커서 닫기</h4><p>사용이 끝난 커서를 닫아줍니다. 커서가 닫히면서 바라보고 있던 테이블과의 관계도 끊기돼 더 이상 커서를 사용할 수 없습니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name;</span><br></pre></td></tr></table></figure><h4 id="5-DEALLOCATE-커서와-관련된-리소스-해제"><a href="#5-DEALLOCATE-커서와-관련된-리소스-해제" class="headerlink" title="5. DEALLOCATE - 커서와 관련된 리소스 해제"></a>5. DEALLOCATE - 커서와 관련된 리소스 해제</h4><p>커서를 사용하기 위해 점유하고 있던 리소스들을 모두 해제해 줍니다. 이때 메모리에 올라간 결과 데이터도 내려오게 됩니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DEALLOCATE</span> cursor_name;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/DataBase/">DataBase</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/05/database/database-cursor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?</title>
      <link>https://ckck803.github.io/2025/04/05/database/large-select/</link>
      <guid>https://ckck803.github.io/2025/04/05/database/large-select/</guid>
      <pubDate>Sat, 05 Apr 2025 11:10:40 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/database/large-select/&quot; title=&quot;[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?&quot;&gt;[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/database/database-cursor/&quot; title=&quot;[데이터 베이스] Cursor 란?&quot;&gt;[데이터 베이스] Cursor 란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;🤔-대용량-조회-시-애플리케이션과-데이터베이스는-어떻게-동작하는가&quot;&gt;&lt;a href=&quot;#🤔-대용량-조회-시-애플리케이션과-데이터베이스는-어떻게-동작하는가&quot; class=&quot;headerlink&quot; title=&quot;🤔 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?&quot;&gt;&lt;/a&gt;🤔 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?&lt;/h2&gt;&lt;p&gt;대용량 데이터를 조회해야 하는 상황이 생기면, 우리는 종종 “애플리케이션 메모리는 괜찮을까?”, “DB에 부하가 가지는 않을까?” 같은 고민을 하게 됩니다. &lt;/p&gt;
&lt;p&gt;자바 JDBC 에서는 이런 상황을 제어하기 위해 &lt;code&gt;cursor&lt;/code&gt; 와 &lt;code&gt;fetch size&lt;/code&gt; 를 이용합니다.&lt;/p&gt;
&lt;h2 id=&quot;🕵️‍♂️-대용량-조회의-기본-흐름&quot;&gt;&lt;a href=&quot;#🕵️‍♂️-대용량-조회의-기본-흐름&quot; class=&quot;headerlink&quot; title=&quot;🕵️‍♂️ 대용량 조회의 기본 흐름&quot;&gt;&lt;/a&gt;🕵️‍♂️ 대용량 조회의 기본 흐름&lt;/h2&gt;&lt;p&gt;JDBC로 쿼리를 실행할 때, 결과가 수천~수만 건이라면 어떻게 처리될까요? 예를 들어, 아래 코드를 실행했다고 가정해 봅시다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; conn.prepareStatement(&lt;span class=&quot;string&quot;&gt;&amp;quot;SELECT * FROM large_table&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ps.setFetchSize(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 한 번에 100건씩 가져오도록 설정&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; ps.executeQuery();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;이 코드가 실행될 때 내부적으로 일어나는 동작은 아래와 같습니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;애플리케이션이 DB에 쿼리를 날립니다.&lt;/li&gt;
&lt;li&gt;DB는 전체 결과를 준비하고 커서를 생성합니다.&lt;/li&gt;
&lt;li&gt;JDBC 드라이버는 커서로부터 100 건씩 row 를 가져옴니다&lt;/li&gt;
&lt;li&gt;row 를 다 소비하면 JDBC는 다음 100 건을 요청합니다.&lt;/li&gt;
&lt;li&gt;이 과정을 반복하여 전체 데이터를 처리합니다.&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/05/database/large-select/" title="[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?">[데이터 베이스] 자바에서 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?</a></li><li><a href="/2025/04/05/database/database-cursor/" title="[데이터 베이스] Cursor 란?">[데이터 베이스] Cursor 란?</a></li></ul><h2 id="🤔-대용량-조회-시-애플리케이션과-데이터베이스는-어떻게-동작하는가"><a href="#🤔-대용량-조회-시-애플리케이션과-데이터베이스는-어떻게-동작하는가" class="headerlink" title="🤔 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?"></a>🤔 대용량 조회 시 애플리케이션과 데이터베이스는 어떻게 동작하는가?</h2><p>대용량 데이터를 조회해야 하는 상황이 생기면, 우리는 종종 “애플리케이션 메모리는 괜찮을까?”, “DB에 부하가 가지는 않을까?” 같은 고민을 하게 됩니다. </p><p>자바 JDBC 에서는 이런 상황을 제어하기 위해 <code>cursor</code> 와 <code>fetch size</code> 를 이용합니다.</p><h2 id="🕵️‍♂️-대용량-조회의-기본-흐름"><a href="#🕵️‍♂️-대용량-조회의-기본-흐름" class="headerlink" title="🕵️‍♂️ 대용량 조회의 기본 흐름"></a>🕵️‍♂️ 대용량 조회의 기본 흐름</h2><p>JDBC로 쿼리를 실행할 때, 결과가 수천~수만 건이라면 어떻게 처리될까요? 예를 들어, 아래 코드를 실행했다고 가정해 봅시다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT * FROM large_table&quot;</span>);</span><br><span class="line">ps.setFetchSize(<span class="number">100</span>); <span class="comment">// 한 번에 100건씩 가져오도록 설정</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure><p>이 코드가 실행될 때 내부적으로 일어나는 동작은 아래와 같습니다</p><ol><li>애플리케이션이 DB에 쿼리를 날립니다.</li><li>DB는 전체 결과를 준비하고 커서를 생성합니다.</li><li>JDBC 드라이버는 커서로부터 100 건씩 row 를 가져옴니다</li><li>row 를 다 소비하면 JDBC는 다음 100 건을 요청합니다.</li><li>이 과정을 반복하여 전체 데이터를 처리합니다.</li></ol><p>어플리케이션에서 쿼리를 데이터베이스에 날리게 되면 쿼리는 1번만 실행되고, 데이터는 설정한 <code>fetch size</code> 단위로 반복적으로 가져옵니다.</p><h2 id="🔎-fetch-size-란-무엇인가"><a href="#🔎-fetch-size-란-무엇인가" class="headerlink" title="🔎 fetch size 란 무엇인가?"></a>🔎 fetch size 란 무엇인가?</h2><blockquote><p>fetch size는 Cursor 를 이용해 데이터 베이스에서 한 번에 가져오는 Row 의 개수</p></blockquote><p>fetch 는 데이터베이스로 부터 데이터를 가져오는 작업입니다. fetch size 란 데이터로부터 한번에 가져오는 row 의 개수를 의미합니다. 이때 cursor 를 이용해 cursor 가 가르키고 있는 위치로부터 지정한 size 만큼의 데이터를 읽어 반환합니다. 예를 들어, JDBC 에서는 fetch size 가 100 이라면, 전체데이터에서 100건씩 커서를 이용해 읽어옵니다.</p><p>이렇게 하면 메모리에 모든 row를 올리지 않아도 되기 때문에 메모리 효율이 좋아지고, 너무 잦은 DB 통신도 막을 수 있어서 성능 최적화에 도움이 됩니다.</p><p><img src="/images/database/database-fetch-size.png" alt="데이터베이스 - fetch size"></p><h2 id="🔎-fetch-size-만큼-쿼리가-여러-번-수행되는가"><a href="#🔎-fetch-size-만큼-쿼리가-여러-번-수행되는가" class="headerlink" title="🔎 fetch size 만큼 쿼리가 여러 번 수행되는가?"></a>🔎 fetch size 만큼 쿼리가 여러 번 수행되는가?</h2><p>전체 데이터가 만건이고 fetch size 가 100 이면 쿼리가 100번 실행될까 하는 의문이 있을 수 있습니다. 하지만, 쿼리를 통해 가져올 데이터 셋이 정해지면 데이터 베이스는 cursor 를 이용해 결과를 fetch size 만큼 나눠서 가져오는 개념이므로 애플리케이션과 DB 간의 데이터 통신은 가져올 수만큼 발생하나 쿼리는 한번만 실행됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/CS/">CS</category>
      
      <category domain="https://ckck803.github.io/categories/CS/DataBase/">DataBase</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/05/database/large-select/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[쿠버네티스] 인증/인가 - OIDC 를 이용한 Keycloak 연동</title>
      <link>https://ckck803.github.io/2025/04/05/k8s/auth/k8s-oidc-keycloak/</link>
      <guid>https://ckck803.github.io/2025/04/05/k8s/auth/k8s-oidc-keycloak/</guid>
      <pubDate>Sat, 05 Apr 2025 01:31:46 GMT</pubDate>
      
      <description>&lt;!-- ![](/images/k8s/helm/helm.png) --&gt;

&lt;p&gt;&lt;img src=&quot;/images/k8s/k8s.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/k8s/auth/k8s-oidc-keycloak/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - OIDC 를 이용한 Keycloak 연동&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - OIDC 를 이용한 Keycloak 연동&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2023/06/11/k8s/auth/ServiceAccount/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - ServiceAccount&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - ServiceAccount&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/03/k8s/auth/cert-user/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/k8s/auth/role-clusterrole/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - Role 과 ClusterRole&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - Role 과 ClusterRole&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;참고&quot;&gt;&lt;a href=&quot;#참고&quot; class=&quot;headerlink&quot; title=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wlsdn3004.tistory.com/62&quot;&gt;https://wlsdn3004.tistory.com/62&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;앞서 말했듯이, 쿠버네티스는 사용자 정보를 저장하지 않습니다. 사용자를 관리하고 싶으면, 쿠버네티스에서 제공하는 OIDC 를 통해 별도의 인증 서버와 연계를 하면 사용자를 관리할 수 있습니다.&lt;/p&gt;
&lt;p&gt;인증서버로 유명한 Keycloak 을 이용해 사용자를 관리하고 쿠버네티스에서 인증을 진행할 수 있도록 설정을 진행하려고 합니다.&lt;/p&gt;
&lt;h2 id=&quot;✅-1-Keycloak-Client-추가&quot;&gt;&lt;a href=&quot;#✅-1-Keycloak-Client-추가&quot; class=&quot;headerlink&quot; title=&quot;✅ 1. Keycloak Client 추가&quot;&gt;&lt;/a&gt;✅ 1. Keycloak Client 추가&lt;/h2&gt;&lt;p&gt;쿠버네티스에서 Keycloak 을 이용해 인증을 진행하기 위해서는 Client 생성(등록) 이 필요합니다.  Client 단위로 Keycloak 에서는 쿠버네티스 사용자들을 관리하고 권한을 매핑해줄 수 있습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- ![](/images/k8s/helm/helm.png) --><p><img src="/images/k8s/k8s.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/05/k8s/auth/k8s-oidc-keycloak/" title="[쿠버네티스] 인증&#x2F;인가 - OIDC 를 이용한 Keycloak 연동">[쿠버네티스] 인증&#x2F;인가 - OIDC 를 이용한 Keycloak 연동</a></li><li><a href="/2023/06/11/k8s/auth/ServiceAccount/" title="[쿠버네티스] 인증&#x2F;인가 - ServiceAccount">[쿠버네티스] 인증&#x2F;인가 - ServiceAccount</a></li><li><a href="/2025/04/03/k8s/auth/cert-user/" title="[쿠버네티스] 인증&#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증">[쿠버네티스] 인증&#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증</a></li><li><a href="/2025/04/05/k8s/auth/role-clusterrole/" title="[쿠버네티스] 인증&#x2F;인가 - Role 과 ClusterRole">[쿠버네티스] 인증&#x2F;인가 - Role 과 ClusterRole</a></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://wlsdn3004.tistory.com/62">https://wlsdn3004.tistory.com/62</a></li></ul><hr><p>앞서 말했듯이, 쿠버네티스는 사용자 정보를 저장하지 않습니다. 사용자를 관리하고 싶으면, 쿠버네티스에서 제공하는 OIDC 를 통해 별도의 인증 서버와 연계를 하면 사용자를 관리할 수 있습니다.</p><p>인증서버로 유명한 Keycloak 을 이용해 사용자를 관리하고 쿠버네티스에서 인증을 진행할 수 있도록 설정을 진행하려고 합니다.</p><h2 id="✅-1-Keycloak-Client-추가"><a href="#✅-1-Keycloak-Client-추가" class="headerlink" title="✅ 1. Keycloak Client 추가"></a>✅ 1. Keycloak Client 추가</h2><p>쿠버네티스에서 Keycloak 을 이용해 인증을 진행하기 위해서는 Client 생성(등록) 이 필요합니다.  Client 단위로 Keycloak 에서는 쿠버네티스 사용자들을 관리하고 권한을 매핑해줄 수 있습니다.</p><h4 id="1-1-Client-생성"><a href="#1-1-Client-생성" class="headerlink" title="1-1. Client 생성"></a>1-1. Client 생성</h4><p><code>kubernetes-client</code> 이름으로 새로운 client 를 생성합니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-client1.png"></p><p>Client authentication 을 활성화 해줍니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-client2.png"></p><p>현재는 OIDC 를 이용하기 위한 URL 이 없으므로 빈칸으로 넘어갑니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-client3.png"></p><h4 id="1-2-Role-생성"><a href="#1-2-Role-생성" class="headerlink" title="1-2. Role 생성"></a>1-2. Role 생성</h4><p>새로운 Role 을 추가해줍니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-add-role.png"></p><h4 id="1-3-User-Client-Role-생성"><a href="#1-3-User-Client-Role-생성" class="headerlink" title="1-3. User Client Role 생성"></a>1-3. User Client Role 생성</h4><p><img src="/images/k8s/auth/k8s-keycloak-user-client-role.png"></p><h4 id="1-4-User-추가"><a href="#1-4-User-추가" class="headerlink" title="1-4. User 추가"></a>1-4. User 추가</h4><p>쿠버네티스 사용자 인증을 위해 <code>test</code> 로 계정을 하나 생성합니다.</p><p><img src="/images/k8s/auth/k8s-create-user.png"></p><p>계정을 활성화 하기 위해서는 password 를 세팅해야 합니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-user-password.png"></p><h4 id="1-5-Group-생성"><a href="#1-5-Group-생성" class="headerlink" title="1-5. Group 생성"></a>1-5. Group 생성</h4><p><img src="/images/k8s/auth/k8s-keycloak-group.png"></p><p><img src="/images/k8s/auth/k8s-keycloak-group2.png"></p><h4 id="1-6-User-에-Group-매핑"><a href="#1-6-User-에-Group-매핑" class="headerlink" title="1-6. User 에 Group 매핑"></a>1-6. User 에 Group 매핑</h4><p><img src="/images/k8s/auth/k8s-keycloak-user-add-group.png"></p><h2 id="✅-2-Kubernetes-API-Server에-OIDC-옵션-추가"><a href="#✅-2-Kubernetes-API-Server에-OIDC-옵션-추가" class="headerlink" title="✅ 2. Kubernetes API Server에 OIDC 옵션 추가"></a>✅ 2. Kubernetes API Server에 OIDC 옵션 추가</h2><h4 id="2-1-kube-apiserver-매니페스트-변경"><a href="#2-1-kube-apiserver-매니페스트-변경" class="headerlink" title="2-1. kube-apiserver 매니페스트 변경"></a>2-1. kube-apiserver 매니페스트 변경</h4><p>쿠버네티스에서 요청을 받은 Kube API Server 가 Keycloak 을 통해 인증의 유효성을 확인할 수 있도록 <code>kube-apiserver.yaml</code> 파일에 설정을 추가해줘야 합니다.</p><p>kubeadm으로 설치했을 경우 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code> 에 파일이 존재합니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--oidc-issuer-url=https://&lt;Keycloak-호스트&gt;/auth/realms/&lt;Realm-이름&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--oidc-client-id=kubernetes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--oidc-username-claim=preferred_username</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--oidc-username-prefix=-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--oidc-groups-claim=groups</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--oidc-groups-prefix=&quot;kubernetes:&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-쿠버네티스-접속을-위한-Keycloak-토큰-생성-테스트"><a href="#2-2-쿠버네티스-접속을-위한-Keycloak-토큰-생성-테스트" class="headerlink" title="2-2. 쿠버네티스 접속을 위한 Keycloak 토큰 생성 테스트"></a>2-2. 쿠버네티스 접속을 위한 Keycloak 토큰 생성 테스트</h4><p>위에서 생성한 Keycloak 에서 사용하기 위한 Client 와 User 정보를 이용해 Token 생성 요청이 정상적으로 이뤄지는지 확인합니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location <span class="string">&#x27;https://&lt;Keycloak-호스트&gt;/realms/&lt;Realm-이름&gt;/protocol/openid-connect/token&#x27;</span> \</span><br><span class="line">  --header <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;grant_type=password&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;client_id=kubernetes-client&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;username=test&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;password=&lt;비밀번호&gt;&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;scope=openid&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;client_secret=&lt;secrete 정보&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>정상적인 응답이 왔을 경우 Keycloak 에서는 아래와 같은 토큰 정보를 반환해줍니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJzOEdsMWxzdUNLcFQ4R0RUcDVycF8waEsxN200TmJEOHFqcWp6dnFkMTFjIn0.eyJleHAiOjE3NDM4NjE0NDYsImlhdCI6MTc0Mzg2MTE0NiwianRpIjoiNzZkZTYwYWMtZGMxYy00YjM1LWFiODUtOWM0ZDNjMDc3M2VlIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmRkYW56aXRzLmNvbS9yZWFsbXMvZGRhbnppdCIsInN1YiI6IjI1MzJiNjYxLTA5ODUtNDI1YS1iYWU2LTNjMmQ4YmQ0ZGEyMyIsInR5cCI6IkJlYXJlciIsImF6cCI6Imt1YmVybmV0ZXMtY2xpZW50Iiwic2lkIjoiMzc5ZDYzZWMtNzUwOS00NzUyLWI3YTQtOTM1NDE4YTllOWNkIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIvKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnsia3ViZXJuZXRlcy1jbGllbnQiOnsicm9sZXMiOlsiYWRtaW4iXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJncm91cHMiOlsia3ViZXJuZXRlczphZG1pbiJdLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0In0.K8A_nTdNhP7HR4dR_hvuqGaWspnwnsQgJ5VPiC2UceO2l5tPi4Bxmh_TmeuIjcIOlv-d_CjgyZ4_kuKrobMpinReuAuFLD3IMuzqvXUMTyWkBv-tAxfcHqk4jceUSQEANdrywfzA7Xb2h38aSytm9TglZa7_P9mbNT34r3R_qnjwSxlnlPegjFfYvJFP107Tt5w6GIbIf3XhoRI_TYzDBSVTIvL_Y7lkvvoNB0woF0gBX914qW8_koD3NE0eNpXINhAWUB7LUycvBMYE-edgWj8menY3XwHrcNiO0FHCgTJ2nfA0KgJAspiWD725UnCW5v7Y7wD5rijNYZ38LiVkIQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;refresh_expires_in&quot;</span><span class="punctuation">:</span> <span class="number">1800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0OGE4YzYzMy0zODk3LTQ3ZjMtYTk3Ni05OTdhNmJkYjQ1MzcifQ.eyJleHAiOjE3NDM4NjI5NDYsImlhdCI6MTc0Mzg2MTE0NiwianRpIjoiZmQ1M2UzNjgtMjM4NC00N2FlLTlhNWYtODEyNjIyNzg0ZmE1IiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmRkYW56aXRzLmNvbS9yZWFsbXMvZGRhbnppdCIsImF1ZCI6Imh0dHBzOi8vYXV0aC5kZGFueml0cy5jb20vcmVhbG1zL2RkYW56aXQiLCJzdWIiOiIyNTMyYjY2MS0wOTg1LTQyNWEtYmFlNi0zYzJkOGJkNGRhMjMiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcy1jbGllbnQiLCJzaWQiOiIzNzlkNjNlYy03NTA5LTQ3NTItYjdhNC05MzU0MThhOWU5Y2QiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGJhc2ljIHJvbGVzIGFjciB3ZWItb3JpZ2lucyBlbWFpbCJ9.jCsS44jWe8xAUV1BNc4bFaamElEtg7pWHuW-m19azInpg-nziZvUrx1RwMYB_sR6pOWRvSOhoIrZXWLJOml7Vg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJzOEdsMWxzdUNLcFQ4R0RUcDVycF8waEsxN200TmJEOHFqcWp6dnFkMTFjIn0.eyJleHAiOjE3NDM4NjE0NDYsImlhdCI6MTc0Mzg2MTE0NiwianRpIjoiNWU0NTk4OTktOTk5NC00N2FlLWE2NjYtOWEwMzNkZmQ1MThkIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmRkYW56aXRzLmNvbS9yZWFsbXMvZGRhbnppdCIsImF1ZCI6Imt1YmVybmV0ZXMtY2xpZW50Iiwic3ViIjoiMjUzMmI2NjEtMDk4NS00MjVhLWJhZTYtM2MyZDhiZDRkYTIzIiwidHlwIjoiSUQiLCJhenAiOiJrdWJlcm5ldGVzLWNsaWVudCIsInNpZCI6IjM3OWQ2M2VjLTc1MDktNDc1Mi1iN2E0LTkzNTQxOGE5ZTljZCIsImF0X2hhc2giOiJ2N3VFMzY2RS1OSmpsa21QbFRJX0dnIiwiYWNyIjoiMSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZ3JvdXBzIjpbImt1YmVybmV0ZXM6YWRtaW4iXSwicHJlZmVycmVkX3VzZXJuYW1lIjoidGVzdCJ9.bAUI2zSw8WGfKtJagjMFMMpza2jHHbPwB5dOGlvC0bgqJANjuZTt8VU43yLps_1ksf3EydOjnnKXoQOPSDrJprdEb6AKud-wzs0KjeuwCWrJXnHEp1YxA9fM8-CTwcExoeFKSHQOIBFkoCAY2F8fUdfmdszqMUj13vm_95QHUwhN8jw12zh_KKS_KwEMODs9fLqTxJLgKHSti7uGQi8CI_NBFDcfC-FP1Q44fzJf7m9trD14NW06iu9IGL4d32xwtcjzdh9d4zM4Wc42bYOfA1wI0l5N-k6jmpYevilWvwACwxLmkHnVdjRlHSS6pb3lY8lyvKSwfMdQs_McMQcsIA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;not-before-policy&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;session_state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;379d63ec-7509-4752-b7a4-935418a9e9cd&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openid profile email&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>위 여러 토큰 중에서 쿠버네티스 API Server 에 요청시에는 <code>id_token</code> 값을 사용합니다. 해당 토큰에 어떤 정보가 있는지 디코딩 해보면 아래와 같은 값들을 갖고 있는 것을 확인할 수 있습니다.</p><p><img src="/images/k8s/auth/k8s-jwt.png"></p><h4 id="2-3-권한-부여-롤-생성-및-롤-바인딩"><a href="#2-3-권한-부여-롤-생성-및-롤-바인딩" class="headerlink" title="2-3. 권한 부여 - 롤 생성 및 롤 바인딩"></a>2-3. 권한 부여 - 롤 생성 및 롤 바인딩</h4><p>쿠버네티스는 인증 후 리소스를 사용하기 위해서는 권한이 필요합니다. 모든 Pod 에 대한 조회 권한을 주기 위해 <code>ClusterRole</code> 을 생성합니다. 만약, 특정 리소스에 대한 권한만을 주고 싶다고 하면 <code>Role</code> 리소스를 생성하면 됩니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">keycloak-role</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;namespaces&quot;</span>, <span class="string">&quot;pods&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br></pre></td></tr></table></figure><p>권한이 생성 됐으면 해당 권한을 사용하기 위한 롤 바인딩 리소스도 생성합니다. 위에서 <code>ClusterRol</code> 을 생성했으므로 <code>ClusterRoleBinding</code> 리소스를 통해 바인딩을 해야 합니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">keycloak-crb-test</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">keycloak-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h4 id="2-4-토큰을-이용해-쿠버네티스-API-Server-요청"><a href="#2-4-토큰을-이용해-쿠버네티스-API-Server-요청" class="headerlink" title="2-4. 토큰을 이용해 쿠버네티스 API Server 요청"></a>2-4. 토큰을 이용해 쿠버네티스 API Server 요청</h4><p>토큰 생성이 정상적으로 되는지 확인했고, 이번에는 생성한 토큰을 이용해 쿠버네티스 API Server 에 요청을 보내려고 합니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TOKEN=$(curl --location <span class="string">&#x27;https://&lt;Keycloak-호스트&gt;/realms/&lt;Realm-이름&gt;/protocol/openid-connect/token&#x27;</span> \</span><br><span class="line">  --header <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;grant_type=password&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;client_id=kubernetes-client&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;username=test&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;password=&lt;비밀번호&gt;&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;scope=openid&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;client_secret=&lt;secrete 정보&gt;&#x27;</span> | jq -r <span class="string">&#x27;.id_token&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 받은 토큰을 이용해 쿠버네티스 API Server 에 요청이 정상적으로 가는지 확인해 봅니다.</span></span><br><span class="line">curl  https://&lt;쿠버네티스 api server 주소&gt;/api/v1/namespaces/default --header <span class="string">&quot;Authorization: Bearer <span class="variable">$&#123;TOKEN&#125;</span>&quot;</span> --insecure</span><br></pre></td></tr></table></figure><p>토큰에 문제가 없을 경우 아래와 같은 응답이 오는 것을 확인할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Namespace&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1c78224d-d264-4c25-873c-4407be8d63e1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resourceVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;creationTimestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-02-20T16:16:48Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;kubernetes.io/metadata.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;managedFields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;manager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kube-apiserver&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Update&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-02-20T16:16:48Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fieldsType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FieldsV1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fieldsV1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;f:metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;f:labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;f:kubernetes.io/metadata.name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;finalizers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;phase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Active&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>인증에 성공한 User 를 이용해 kubectl 명령어를 이용하기 위해 <code>kubeconfig</code> 파일에 토큰 정보를 반영해줍니다.</p><figure class="highlight yaml"><figcaption><span>config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tLS1CRUdJ</span> <span class="string">...</span> <span class="string">DQVRFLS0tLS0K</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">&lt;kubernetes</span> <span class="string">api</span> <span class="string">server</span> <span class="string">주소&gt;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">kubernetes</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">token:</span> <span class="string">eyJhbGciO</span> <span class="string">...</span> <span class="string">GfZXJw</span>  <span class="comment"># 요청을 통해 생성된 토큰을 추가해 줍니다.</span></span><br></pre></td></tr></table></figure><h4 id="2-5-인증-및-인가-에러"><a href="#2-5-인증-및-인가-에러" class="headerlink" title="2-5. 인증 및 인가 에러"></a>2-5. 인증 및 인가 에러</h4><p>인증이 정상적으로 이뤄지지 않은 경우에는 다음과 같은 <code>401</code> 에러가 발생하게 됩니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Status&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Failure&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unauthorized&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unauthorized&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">401</span></span><br><span class="line"><span class="punctuation">&#125;</span>%</span><br></pre></td></tr></table></figure><p>권한이 제대로 안들어가 있을 경우 <code>403</code> 에러와 함께 리소스에 대한 접근을 할 수 없다는 오류 메시지를 확인할 수 있습니다.  </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Status&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Failure&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;namespaces \&quot;default\&quot; is forbidden: User \&quot;test\&quot; cannot get resource \&quot;namespaces\&quot; in API group \&quot;\&quot; in the namespace \&quot;default\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbidden&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;namespaces&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span></span><br><span class="line"><span class="punctuation">&#125;</span>%</span><br></pre></td></tr></table></figure><h2 id="✅-3-kubelogin-OIDC-를-이용하기-위한-Client-사용"><a href="#✅-3-kubelogin-OIDC-를-이용하기-위한-Client-사용" class="headerlink" title="✅ 3. kubelogin - OIDC 를 이용하기 위한 Client 사용"></a>✅ 3. kubelogin - OIDC 를 이용하기 위한 Client 사용</h2><p>쿠버네티스에서 Keycloak 을 이용해 사용자 인증과정에 대한 설정이 끝났습니다. 하지만, 사용자가 쿠버네티스로의 인증 방식에 대해서는 현재 딱히 정해진게 없습니다. </p><p>위 과정에서 쿠버네티스 리소스를 이용하기 전에 토큰을 생성하고, 토큰을 config 파일에 반영하는 과정들이 있습니다. </p><p>매번 반복적으로 하기에는 번거로운 이 과정을 단순화 하기 위해 kubelogin 을 사용해 인증을 간편화하려고 합니다.</p><h4 id="3-1-kubelogin-설치"><a href="#3-1-kubelogin-설치" class="headerlink" title="3-1. kubelogin 설치."></a>3-1. kubelogin 설치.</h4><p><a href="https://github.com/int128/kubelogin">kubelogin 공식문서</a> 에서 운영체제 별로 설치하는 방법이 있습니다. 저는 맥환경에서 이용하므로 brew 를 이용한 방법만 정리했습니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install kubelogin</span><br></pre></td></tr></table></figure><h4 id="3-2-kubelogin-설치"><a href="#3-2-kubelogin-설치" class="headerlink" title="3-2. kubelogin 설치."></a>3-2. kubelogin 설치.</h4><p>kubelogin 에서는 <code>8000</code> 번 포트를 이용해 응답을 대기 합니다. 인증에 성공 후 kubelogin 로 응답을 보내주기 위해 <code>Valid redirect URIs</code> 설정을 추가해줍니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-redirect.png"></p><h4 id="3-3-kubeconfig-파일에-정보-추가"><a href="#3-3-kubeconfig-파일에-정보-추가" class="headerlink" title="3-3. kubeconfig 파일에 정보 추가"></a>3-3. kubeconfig 파일에 정보 추가</h4><p>쿠버네티스에서 kubelogin 을 이용해 사용자 인증이 진행될 수 있도록 config 파일에 명령어와 옵션들을 추가합니다. 해당 정보들을 통해 kubelogin 에서 Keycloak 을 이용해 인증을 진행하고 인증정보들을 관리해줍니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keycloak-user</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">client.authentication.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">kubectl</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">oidc-login</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">get-token</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--oidc-issuer-url=https://&lt;Keycloak-호스트&gt;/auth/realms/&lt;Realm-이름&gt;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--oidc-client-id=kubernetes-client</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--oidc-client-secret=&lt;Keycloak</span> <span class="string">Client</span> <span class="string">Secret&gt;</span></span><br></pre></td></tr></table></figure><p>명령어를 이용해서도 config 파일에 설정정보를 추가할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl config set-credentials keycloak-user \</span><br><span class="line">  --exec-api-version=client.authentication.k8s.io/v1beta1 \</span><br><span class="line">  --exec-command=kubectl \</span><br><span class="line">  --exec-arg=oidc-login \</span><br><span class="line">  --exec-arg=get-token \</span><br><span class="line">  --exec-arg=--oidc-issuer-url=https://&lt;Keycloak-호스트&gt;/auth/realms/&lt;Realm-이름&gt; \</span><br><span class="line">  --exec-arg=--oidc-client-id=kubernetes-client \</span><br><span class="line">  --exec-arg=--oidc-client-secret=&lt;Keycloak Client Secret&gt;</span><br></pre></td></tr></table></figure><p>아래 처럼 User 정보를 명시적으로 지정해서 명령어를 사용할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl --user=keycloak-user get nodes</span><br></pre></td></tr></table></figure><p>kubectl 명령어를 사용하게 되면 kubelogin 가 Keycloak 을 통해 사용자 인증을 하도록 화면을 띄어줍니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-kubelogin.png"></p><p>인증이 정상적으로 이뤄지면 아래와 같이 성공했다는 메시지가 뜨고 위에서 실행한 결과가 정상적으로 실행됩니다.</p><p><img src="/images/k8s/auth/k8s-keycloak-kubelogin-success.png"></p><h4 id="3-4-전체-kubeconfig-파일"><a href="#3-4-전체-kubeconfig-파일" class="headerlink" title="3-4. 전체 kubeconfig 파일"></a>3-4. 전체 kubeconfig 파일</h4><p>이제 새로운 쿠버네티스 운영자가 왔을 경우 해당 config 파일을 건내주면 Keycloak 을 통해 사용자 인증을 받고 쿠버네티스 리소스에 접근할 수 있습니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tLS1CRUdJ</span> <span class="string">...</span> <span class="string">DQVRFLS0tLS0K</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">&lt;kubernetes</span> <span class="string">api</span> <span class="string">server</span> <span class="string">주소&gt;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">kubernetes</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">keycloak-user</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keycloak-user</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">client.authentication.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">kubectl</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">oidc-login</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">get-token</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--oidc-issuer-url=https://&lt;Keycloak-호스트&gt;/auth/realms/&lt;Realm-이름&gt;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--oidc-client-id=kubernetes-client</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--oidc-client-secret=&lt;Keycloak</span> <span class="string">Client</span> <span class="string">Secret&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Kubernetes/">Kubernetes</category>
      
      <category domain="https://ckck803.github.io/categories/Kubernetes/%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80/">인증/인가</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/05/k8s/auth/k8s-oidc-keycloak/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[쿠버네티스] 인증/인가 - Role 과 ClusterRole</title>
      <link>https://ckck803.github.io/2025/04/05/k8s/auth/role-clusterrole/</link>
      <guid>https://ckck803.github.io/2025/04/05/k8s/auth/role-clusterrole/</guid>
      <pubDate>Sat, 05 Apr 2025 01:31:46 GMT</pubDate>
      
      <description>&lt;!-- ![](/images/k8s/helm/helm.png) --&gt;

&lt;p&gt;&lt;img src=&quot;/images/k8s/k8s.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/k8s/auth/k8s-oidc-keycloak/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - OIDC 를 이용한 Keycloak 연동&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - OIDC 를 이용한 Keycloak 연동&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2023/06/11/k8s/auth/ServiceAccount/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - ServiceAccount&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - ServiceAccount&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/03/k8s/auth/cert-user/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2025/04/05/k8s/auth/role-clusterrole/&quot; title=&quot;[쿠버네티스] 인증&amp;#x2F;인가 - Role 과 ClusterRole&quot;&gt;[쿠버네티스] 인증&amp;#x2F;인가 - Role 과 ClusterRole&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;쿠버네티스에서 Role과 ClusterRole은 RBAC(역할 기반 접근 제어)를 통해 사용자나 서비스 계정에 권한을 부여하는 중요한 리소스입니다. 아래에 각각의 특징과 차이점을 정리해 보았습니다.&lt;/p&gt;
&lt;h2 id=&quot;Role&quot;&gt;&lt;a href=&quot;#Role&quot; class=&quot;headerlink&quot; title=&quot;Role&quot;&gt;&lt;/a&gt;Role&lt;/h2&gt;&lt;p&gt;네임스페이스 범위: Role은 특정 네임스페이스 내에서만 유효합니다. 따라서 한 네임스페이스의 자원에만 접근 권한을 부여할 수 있습니다.&lt;/p&gt;
&lt;p&gt;정책 정의: Role 안에는 API 리소스(예: Pods, Services 등)에 대한 특정 동작(예: get, list, create 등)이 정의되어 있습니다.&lt;/p&gt;
&lt;p&gt;바인딩: Role은 RoleBinding을 통해 사용자나 서비스 계정에 연결됩니다. 이때 RoleBinding 역시 특정 네임스페이스에 속합니다.&lt;/p&gt;
</description>
      
      
      
      <content:encoded><![CDATA[<!-- ![](/images/k8s/helm/helm.png) --><p><img src="/images/k8s/k8s.png"></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="/2025/04/05/k8s/auth/k8s-oidc-keycloak/" title="[쿠버네티스] 인증&#x2F;인가 - OIDC 를 이용한 Keycloak 연동">[쿠버네티스] 인증&#x2F;인가 - OIDC 를 이용한 Keycloak 연동</a></li><li><a href="/2023/06/11/k8s/auth/ServiceAccount/" title="[쿠버네티스] 인증&#x2F;인가 - ServiceAccount">[쿠버네티스] 인증&#x2F;인가 - ServiceAccount</a></li><li><a href="/2025/04/03/k8s/auth/cert-user/" title="[쿠버네티스] 인증&#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증">[쿠버네티스] 인증&#x2F;인가 - X.509 인증서를 사용한 사용자 추가 및 인증</a></li><li><a href="/2025/04/05/k8s/auth/role-clusterrole/" title="[쿠버네티스] 인증&#x2F;인가 - Role 과 ClusterRole">[쿠버네티스] 인증&#x2F;인가 - Role 과 ClusterRole</a></li></ul><p>쿠버네티스에서 Role과 ClusterRole은 RBAC(역할 기반 접근 제어)를 통해 사용자나 서비스 계정에 권한을 부여하는 중요한 리소스입니다. 아래에 각각의 특징과 차이점을 정리해 보았습니다.</p><h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h2><p>네임스페이스 범위: Role은 특정 네임스페이스 내에서만 유효합니다. 따라서 한 네임스페이스의 자원에만 접근 권한을 부여할 수 있습니다.</p><p>정책 정의: Role 안에는 API 리소스(예: Pods, Services 등)에 대한 특정 동작(예: get, list, create 등)이 정의되어 있습니다.</p><p>바인딩: Role은 RoleBinding을 통해 사용자나 서비스 계정에 연결됩니다. 이때 RoleBinding 역시 특정 네임스페이스에 속합니다.</p>]]></content:encoded>
      
      
      <category domain="https://ckck803.github.io/categories/Kubernetes/">Kubernetes</category>
      
      <category domain="https://ckck803.github.io/categories/Kubernetes/%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80/">인증/인가</category>
      
      
      
      <comments>https://ckck803.github.io/2025/04/05/k8s/auth/role-clusterrole/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
